"""
This type stub file was generated by pyright.
"""

from collections.abc import MutableMapping
from numba.core.types import DictType
from numba.core.imputils import numba_typeref_ctor
from numba.core import types
from numba.core.extending import box, overload, overload_classmethod, type_callable, unbox

"""
Python wrapper that connects CPython interpreter to the numba dictobject.
"""
class Dict(MutableMapping):
    """A typed-dictionary usable in Numba compiled functions.

    Implements the MutableMapping interface.
    """
    def __new__(cls, dcttype=..., meminfo=..., n_keys=...): # -> dict[Any, Any] | Self:
        ...
    
    @classmethod
    def empty(cls, key_type, value_type, n_keys=...): # -> dict[Any, Any] | Self:
        """Create a new empty Dict with *key_type* and *value_type*
        as the types for the keys and values of the dictionary respectively.

        Optionally, allocate enough memory to hold *n_keys* without requiring
        resizes. The default value of 0 returns a dict with minimum size.
        """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        """
        For users, the constructor does not take any parameters.
        The keyword arguments are for internal use only.

        Parameters
        ----------
        dcttype : numba.core.types.DictType; keyword-only
            Used internally for the dictionary type.
        meminfo : MemInfo; keyword-only
            Used internally to pass the MemInfo object when boxing.
        """
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[Never] | Iterator[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def get(self, key, default=...): # -> None:
        ...
    
    def setdefault(self, key, default=...):
        ...
    
    def popitem(self):
        ...
    
    def copy(self):
        ...
    


@overload_classmethod(types.DictType, 'empty')
def typeddict_empty(cls, key_type, value_type, n_keys=...): # -> Callable[..., dict[Any, Any]] | None:
    ...

@box(types.DictType)
def box_dicttype(typ, val, c):
    ...

@unbox(types.DictType)
def unbox_dicttype(typ, val, c): # -> NativeValue:
    ...

@type_callable(DictType)
def typeddict_call(context): # -> Callable[..., DictType | None]:
    """
    Defines typing logic for ``Dict()`` and ``Dict(iterable)``.
    Produces Dict[undefined, undefined] or Dict[key, value]
    """
    ...

@overload(numba_typeref_ctor)
def impl_numba_typeref_ctor(cls, *args): # -> Callable[..., dict[Any, Any] | Dict] | None:
    """
    Defines lowering for ``Dict()`` and ``Dict(iterable)``.

    The type-inferred version of the dictionary ctor.

    Parameters
    ----------
    cls : TypeRef
        Expecting a TypeRef of a precise DictType.
    args: tuple
        A tuple that contains a single iterable (optional)

    Returns
    -------
    impl : function
        An implementation suitable for lowering the constructor call.

    See also: `redirect_type_ctor` in numba/cpython/builtins.py
    """
    ...

