"""
This type stub file was generated by pyright.
"""

import operator
from numba.core import types
from numba.core.imputils import RefType, iternext_impl, lower_builtin, lower_cast
from numba.core.extending import overload, overload_method

"""
Support for native homogeneous sets.
"""
def get_payload_struct(context, builder, set_type, ptr):
    """
    Given a set value and type, get its payload structure (as a
    reference, so that mutations are seen by all).
    """
    ...

def get_entry_size(context, set_type):
    """
    Return the entry size for the given set type.
    """
    ...

EMPTY = ...
DELETED = ...
FALLBACK = ...
MINSIZE = ...
LINEAR_PROBES = ...
DEBUG_ALLOCS = ...
def get_hash_value(context, builder, typ, value):
    """
    Compute the hash of the given value.
    """
    ...

def is_hash_empty(context, builder, h):
    """
    Whether the hash value denotes an empty entry.
    """
    ...

def is_hash_deleted(context, builder, h):
    """
    Whether the hash value denotes a deleted entry.
    """
    ...

def is_hash_used(context, builder, h):
    """
    Whether the hash value denotes an active entry.
    """
    ...

def check_all_set(*args): # -> None:
    ...

SetLoop = ...
class _SetPayload:
    def __init__(self, context, builder, set_type, ptr) -> None:
        ...
    
    @property
    def mask(self):
        ...
    
    @mask.setter
    def mask(self, value): # -> None:
        ...
    
    @property
    def used(self):
        ...
    
    @used.setter
    def used(self, value): # -> None:
        ...
    
    @property
    def fill(self):
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def finger(self):
        ...
    
    @finger.setter
    def finger(self, value): # -> None:
        ...
    
    @property
    def dirty(self):
        ...
    
    @dirty.setter
    def dirty(self, value): # -> None:
        ...
    
    @property
    def entries(self):
        """
        A pointer to the start of the entries array.
        """
        ...
    
    @property
    def ptr(self): # -> Any:
        """
        A pointer to the start of the NRT-allocated area.
        """
        ...
    
    def get_entry(self, idx):
        """
        Get entry number *idx*.
        """
        ...
    


class SetInstance:
    def __init__(self, context, builder, set_type, set_val) -> None:
        ...
    
    @property
    def dtype(self):
        ...
    
    @property
    def payload(self): # -> _SetPayload:
        """
        The _SetPayload for this set.
        """
        ...
    
    @property
    def value(self):
        ...
    
    @property
    def meminfo(self):
        ...
    
    @property
    def parent(self):
        ...
    
    @parent.setter
    def parent(self, value): # -> None:
        ...
    
    def get_size(self):
        """
        Return the number of elements in the size.
        """
        ...
    
    def set_dirty(self, val): # -> None:
        ...
    
    def add(self, item, do_resize=...): # -> None:
        ...
    
    def add_pyapi(self, pyapi, item, do_resize=...): # -> None:
        """A version of .add for use inside functions following Python calling
        convention.
        """
        ...
    
    def contains(self, item):
        ...
    
    def discard(self, item):
        ...
    
    def pop(self):
        ...
    
    def clear(self): # -> None:
        ...
    
    def copy(self): # -> Self:
        """
        Return a copy of this set.
        """
        ...
    
    def intersect(self, other): # -> None:
        """
        In-place intersection with *other* set.
        """
        ...
    
    def difference(self, other): # -> None:
        """
        In-place difference with *other* set.
        """
        ...
    
    def symmetric_difference(self, other): # -> None:
        """
        In-place symmetric difference with *other* set.
        """
        ...
    
    def issubset(self, other, strict=...):
        ...
    
    def isdisjoint(self, other):
        ...
    
    def equals(self, other):
        ...
    
    @classmethod
    def allocate_ex(cls, context, builder, set_type, nitems=...): # -> tuple[Any, Self]:
        """
        Allocate a SetInstance with its storage.
        Return a (ok, instance) tuple where *ok* is a LLVM boolean and
        *instance* is a SetInstance object (the object's contents are
        only valid when *ok* is true).
        """
        ...
    
    @classmethod
    def allocate(cls, context, builder, set_type, nitems=...): # -> Self:
        """
        Allocate a SetInstance with its storage.  Same as allocate_ex(),
        but return an initialized *instance*.  If allocation failed,
        control is transferred to the caller using the target's current
        call convention.
        """
        ...
    
    @classmethod
    def from_meminfo(cls, context, builder, set_type, meminfo): # -> Self:
        """
        Allocate a new set instance pointing to an existing payload
        (a meminfo pointer).
        Note the parent field has to be filled by the caller.
        """
        ...
    
    @classmethod
    def choose_alloc_size(cls, context, builder, nitems):
        """
        Choose a suitable number of entries for the given number of items.
        """
        ...
    
    def upsize(self, nitems): # -> None:
        """
        When adding to the set, ensure it is properly sized for the given
        number of used entries.
        """
        ...
    
    def downsize(self, nitems): # -> None:
        """
        When removing from the set, ensure it is properly sized for the given
        number of used entries.
        """
        ...
    
    def incref_value(self, val): # -> None:
        """Incref an element value
        """
        ...
    
    def decref_value(self, val): # -> None:
        """Decref an element value
        """
        ...
    


class SetIterInstance:
    def __init__(self, context, builder, iter_type, iter_val) -> None:
        ...
    
    @classmethod
    def from_set(cls, context, builder, iter_type, set_val): # -> Self:
        ...
    
    @property
    def value(self):
        ...
    
    @property
    def meminfo(self):
        ...
    
    @property
    def index(self):
        ...
    
    @index.setter
    def index(self, value): # -> None:
        ...
    
    def iternext(self, result): # -> None:
        ...
    


def build_set(context, builder, set_type, items):
    """
    Build a set of the given type, containing the given items.
    """
    ...

@lower_builtin(set)
def set_empty_constructor(context, builder, sig, args):
    ...

@lower_builtin(set, types.IterableType)
def set_constructor(context, builder, sig, args):
    ...

@lower_builtin(len, types.Set)
def set_len(context, builder, sig, args):
    ...

@lower_builtin(operator.contains, types.Set, types.Any)
def in_set(context, builder, sig, args):
    ...

@lower_builtin('getiter', types.Set)
def getiter_set(context, builder, sig, args):
    ...

@lower_builtin('iternext', types.SetIter)
@iternext_impl(RefType.BORROWED)
def iternext_listiter(context, builder, sig, args, result): # -> None:
    ...

@lower_builtin("set.add", types.Set, types.Any)
def set_add(context, builder, sig, args):
    ...

@overload_method(types.Set, "discard")
def ol_set_discard(s, item): # -> Callable[..., Any]:
    ...

@overload_method(types.Set, "pop")
def ol_set_pop(s): # -> Callable[..., Any]:
    ...

@overload_method(types.Set, "remove")
def ol_set_remove(s, item): # -> Callable[..., Any] | None:
    ...

@overload_method(types.Set, "clear")
def ol_set_clear(s): # -> Callable[..., Any]:
    ...

@overload_method(types.Set, "copy")
def ol_set_copy(s): # -> Callable[..., Any]:
    ...

def set_difference_update(context, builder, sig, args):
    ...

@overload_method(types.Set, "difference_update")
def set_difference_update_impl(a, b): # -> Callable[..., Any]:
    ...

def set_intersection_update(context, builder, sig, args):
    ...

@overload_method(types.Set, "intersection_update")
def set_intersection_update_impl(a, b): # -> Callable[..., Any]:
    ...

def set_symmetric_difference_update(context, builder, sig, args):
    ...

@overload_method(types.Set, "symmetric_difference_update")
def set_symmetric_difference_update_impl(a, b): # -> Callable[..., Any]:
    ...

@lower_builtin("set.update", types.Set, types.IterableType)
def set_update(context, builder, sig, args):
    ...

def gen_operator_impl(op, impl): # -> None:
    ...

@overload(operator.sub)
@overload_method(types.Set, "difference")
def impl_set_difference(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.and_)
@overload_method(types.Set, "intersection")
def set_intersection(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.xor)
@overload_method(types.Set, "symmetric_difference")
def set_symmetric_difference(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.or_)
@overload_method(types.Set, "union")
def set_union(a, b): # -> Callable[..., Any]:
    ...

@overload_method(types.Set, "isdisjoint")
def set_isdisjoint(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.le)
@overload_method(types.Set, "issubset")
def set_issubset(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.ge)
@overload_method(types.Set, "issuperset")
def set_issuperset(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.eq)
def set_eq(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.ne)
def set_ne(a, b): # -> Callable[..., bool]:
    ...

@overload(operator.lt)
def set_lt(a, b): # -> Callable[..., Any]:
    ...

@overload(operator.gt)
def set_gt(a, b): # -> Callable[..., Any]:
    ...

@lower_builtin(operator.is_, types.Set, types.Set)
def set_is(context, builder, sig, args):
    ...

@lower_cast(types.Set, types.Set)
def set_to_set(context, builder, fromty, toty, val):
    ...

