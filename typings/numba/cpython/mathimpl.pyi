"""
This type stub file was generated by pyright.
"""

import math
from numba.core import types

"""
Provide math calls that uses intrinsics or libc math functions.
"""
registry = ...
lower = ...
_NP_FLT_FINFO = ...
FLT_MAX = ...
FLT_MIN = ...
_NP_DBL_FINFO = ...
DBL_MAX = ...
DBL_MIN = ...
FLOAT_ABS_MASK = ...
FLOAT_SIGN_MASK = ...
DOUBLE_ABS_MASK = ...
DOUBLE_SIGN_MASK = ...
def is_nan(builder, val):
    """
    Return a condition testing whether *val* is a NaN.
    """
    ...

def is_inf(builder, val):
    """
    Return a condition testing whether *val* is an infinite.
    """
    ...

def is_finite(builder, val):
    """
    Return a condition testing whether *val* is a finite.
    """
    ...

def f64_as_int64(builder, val):
    """
    Bitcast a double into a 64-bit integer.
    """
    ...

def int64_as_f64(builder, val):
    """
    Bitcast a 64-bit integer into a double.
    """
    ...

def f32_as_int32(builder, val):
    """
    Bitcast a float into a 32-bit integer.
    """
    ...

def int32_as_f32(builder, val):
    """
    Bitcast a 32-bit integer into a float.
    """
    ...

def negate_real(builder, val):
    """
    Negate real number *val*, with proper handling of zeros.
    """
    ...

def call_fp_intrinsic(builder, name, args):
    """
    Call a LLVM intrinsic floating-point operation.
    """
    ...

def unary_math_int_impl(fn, float_impl): # -> None:
    ...

def unary_math_intr(fn, intrcode): # -> Callable[..., Any]:
    """
    Implement the math function *fn* using the LLVM intrinsic *intrcode*.
    """
    ...

def unary_math_extern(fn, f32extern, f64extern, int_restype=...): # -> Callable[..., Any]:
    """
    Register implementations of Python function *fn* using the
    external function named *f32extern* and *f64extern* (for float32
    and float64 inputs, respectively).
    If *int_restype* is true, then the function's return value should be
    integral, otherwise floating-point.
    """
    ...

exp_impl = ...
log_impl = ...
log10_impl = ...
sin_impl = ...
cos_impl = ...
log1p_impl = ...
expm1_impl = ...
erf_impl = ...
erfc_impl = ...
tan_impl = ...
asin_impl = ...
acos_impl = ...
atan_impl = ...
asinh_impl = ...
acosh_impl = ...
atanh_impl = ...
sinh_impl = ...
cosh_impl = ...
tanh_impl = ...
log2_impl = ...
ceil_impl = ...
floor_impl = ...
gamma_impl = ...
sqrt_impl = ...
trunc_impl = ...
lgamma_impl = ...
@lower(math.isnan, types.Float)
def isnan_float_impl(context, builder, sig, args):
    ...

@lower(math.isnan, types.Integer)
def isnan_int_impl(context, builder, sig, args): # -> Constant:
    ...

@lower(math.isinf, types.Float)
def isinf_float_impl(context, builder, sig, args):
    ...

@lower(math.isinf, types.Integer)
def isinf_int_impl(context, builder, sig, args): # -> Constant:
    ...

@lower(math.isfinite, types.Float)
def isfinite_float_impl(context, builder, sig, args):
    ...

@lower(math.isfinite, types.Integer)
def isfinite_int_impl(context, builder, sig, args): # -> Constant:
    ...

@lower(math.copysign, types.Float, types.Float)
def copysign_float_impl(context, builder, sig, args):
    ...

@lower(math.frexp, types.Float)
def frexp_impl(context, builder, sig, args): # -> Constant:
    ...

@lower(math.ldexp, types.Float, types.intc)
def ldexp_impl(context, builder, sig, args):
    ...

@lower(math.atan2, types.int64, types.int64)
def atan2_s64_impl(context, builder, sig, args):
    ...

@lower(math.atan2, types.uint64, types.uint64)
def atan2_u64_impl(context, builder, sig, args):
    ...

@lower(math.atan2, types.Float, types.Float)
def atan2_float_impl(context, builder, sig, args):
    ...

@lower(math.hypot, types.int64, types.int64)
def hypot_s64_impl(context, builder, sig, args):
    ...

@lower(math.hypot, types.uint64, types.uint64)
def hypot_u64_impl(context, builder, sig, args):
    ...

@lower(math.hypot, types.Float, types.Float)
def hypot_float_impl(context, builder, sig, args):
    ...

@lower(math.radians, types.Float)
def radians_float_impl(context, builder, sig, args):
    ...

@lower(math.degrees, types.Float)
def degrees_float_impl(context, builder, sig, args):
    ...

@lower(math.pow, types.Float, types.Float)
@lower(math.pow, types.Float, types.Integer)
def pow_impl(context, builder, sig, args):
    ...

def gcd_impl(context, builder, sig, args):
    ...

