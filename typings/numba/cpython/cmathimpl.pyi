"""
This type stub file was generated by pyright.
"""

import cmath
from numba.core import types
from numba.core.extending import overload

"""
Implement the cmath module functions.
"""
registry = ...
lower = ...
def is_nan(builder, z):
    ...

def is_inf(builder, z):
    ...

def is_finite(builder, z):
    ...

@lower(cmath.isnan, types.Complex)
def isnan_float_impl(context, builder, sig, args):
    ...

@lower(cmath.isinf, types.Complex)
def isinf_float_impl(context, builder, sig, args):
    ...

@lower(cmath.isfinite, types.Complex)
def isfinite_float_impl(context, builder, sig, args):
    ...

@overload(cmath.rect)
def impl_cmath_rect(r, phi): # -> Callable[..., Any | complex] | None:
    ...

def intrinsic_complex_unary(inner_func): # -> Callable[..., Any]:
    ...

NAN = ...
INF = ...
@lower(cmath.exp, types.Complex)
@intrinsic_complex_unary
def exp_impl(x, y, x_is_finite, y_is_finite): # -> complex:
    """cmath.exp(x + y j)"""
    ...

@lower(cmath.log, types.Complex)
@intrinsic_complex_unary
def log_impl(x, y, x_is_finite, y_is_finite): # -> complex:
    """cmath.log(x + y j)"""
    ...

@lower(cmath.log, types.Complex, types.Complex)
def log_base_impl(context, builder, sig, args):
    """cmath.log(z, base)"""
    ...

@overload(cmath.log10)
def impl_cmath_log10(z): # -> Callable[..., complex] | None:
    ...

@overload(cmath.phase)
def phase_impl(x): # -> Callable[..., float] | None:
    """cmath.phase(x + y j)"""
    ...

@overload(cmath.polar)
def polar_impl(x): # -> Callable[..., tuple[float, float]] | None:
    ...

@lower(cmath.sqrt, types.Complex)
def sqrt_impl(context, builder, sig, args):
    ...

@lower(cmath.cos, types.Complex)
def cos_impl(context, builder, sig, args):
    ...

@overload(cmath.cosh)
def impl_cmath_cosh(z): # -> Callable[..., complex] | None:
    ...

@lower(cmath.sin, types.Complex)
def sin_impl(context, builder, sig, args):
    ...

@overload(cmath.sinh)
def impl_cmath_sinh(z): # -> Callable[..., complex] | None:
    ...

@lower(cmath.tan, types.Complex)
def tan_impl(context, builder, sig, args):
    ...

@overload(cmath.tanh)
def impl_cmath_tanh(z): # -> Callable[..., complex] | None:
    ...

@lower(cmath.acos, types.Complex)
def acos_impl(context, builder, sig, args):
    ...

@overload(cmath.acosh)
def impl_cmath_acosh(z): # -> Callable[..., complex] | None:
    ...

@lower(cmath.asinh, types.Complex)
def asinh_impl(context, builder, sig, args):
    ...

@lower(cmath.asin, types.Complex)
def asin_impl(context, builder, sig, args):
    ...

@lower(cmath.atan, types.Complex)
def atan_impl(context, builder, sig, args):
    ...

@lower(cmath.atanh, types.Complex)
def atanh_impl(context, builder, sig, args):
    ...

