"""
This type stub file was generated by pyright.
"""

import operator
from numba.core.imputils import lower_builtin, lower_cast, lower_constant, lower_getattr, lower_getattr_generic
from numba.core import types
from numba.core.extending import overload_method

"""
Implementation of enums.
"""
@lower_builtin(operator.eq, types.EnumMember, types.EnumMember)
def enum_eq(context, builder, sig, args):
    ...

@lower_builtin(operator.is_, types.EnumMember, types.EnumMember)
def enum_is(context, builder, sig, args):
    ...

@lower_builtin(operator.ne, types.EnumMember, types.EnumMember)
def enum_ne(context, builder, sig, args):
    ...

@lower_getattr(types.EnumMember, 'value')
def enum_value(context, builder, ty, val):
    ...

@lower_cast(types.IntEnumMember, types.Integer)
def int_enum_to_int(context, builder, fromty, toty, val):
    """
    Convert an IntEnum member to its raw integer value.
    """
    ...

@lower_constant(types.EnumMember)
def enum_constant(context, builder, ty, pyval):
    """
    Return a LLVM constant representing enum member *pyval*.
    """
    ...

@lower_getattr_generic(types.EnumClass)
def enum_class_getattr(context, builder, ty, val, attr):
    """
    Return an enum member by attribute name.
    """
    ...

@lower_builtin('static_getitem', types.EnumClass, types.StringLiteral)
def enum_class_getitem(context, builder, sig, args):
    """
    Return an enum member by index name.
    """
    ...

@overload_method(types.IntEnumMember, '__hash__')
def intenum_hash(val): # -> Callable[..., int]:
    ...

