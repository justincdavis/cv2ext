"""
This type stub file was generated by pyright.
"""

logger = ...
__all__ = ['Compiler']
NULL = ...
ZERO = ...
ONE = ...
METH_VARARGS_AND_KEYWORDS = ...
def get_header(): # -> str:
    ...

class ExportEntry:
    """
    A simple record for exporting symbols.
    """
    def __init__(self, symbol, signature, function) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


class _ModuleCompiler:
    """A base class to compile Python modules to a single shared library or
    extension module.

    :param export_entries: a list of ExportEntry instances.
    :param module_name: the name of the exported module.
    """
    method_def_ty = ...
    method_def_ptr = ...
    env_def_ty = ...
    env_def_ptr = ...
    def __init__(self, export_entries, module_name, use_nrt=..., **aot_options) -> None:
        ...
    
    def write_llvm_bitcode(self, output, wrap=..., **kws): # -> None:
        ...
    
    def write_native_object(self, output, wrap=..., **kws): # -> None:
        ...
    
    def emit_type(self, tyobj): # -> str:
        ...
    
    def emit_header(self, output): # -> None:
        ...
    


class ModuleCompiler(_ModuleCompiler):
    _ptr_fun = ...
    visitproc_ty = ...
    inquiry_ty = ...
    traverseproc_ty = ...
    freefunc_ty = ...
    m_init_ty = ...
    _char_star = ...
    module_def_base_ty = ...
    module_def_ty = ...
    @property
    def module_create_definition(self): # -> tuple[FunctionType, Literal['PyModule_Create2TraceRefs', 'PyModule_Create2']]:
        """
        Return the signature and name of the Python C API function to
        initialize the module.
        """
        ...
    
    @property
    def module_init_definition(self): # -> tuple[FunctionType, LiteralString]:
        """
        Return the name and signature of the module's initialization function.
        """
        ...
    


