"""
This type stub file was generated by pyright.
"""

import functools

CCompiler = ...
new_compiler = ...
customize_compiler = ...
log = ...
_configs = ...
def get_configs(arg):
    ...

find_shared_ending = ...
find_pyext_ending = ...
@functools.lru_cache(maxsize=1)
def external_compiler_works(): # -> bool:
    """
    Returns True if the "external compiler" bound in numpy.distutil is present
    and working, False otherwise.
    """
    ...

class _DummyExtension:
    libraries = ...


class Toolchain:
    def __init__(self) -> None:
        ...
    
    @property
    def verbose(self): # -> bool:
        ...
    
    @verbose.setter
    def verbose(self, value): # -> None:
        ...
    
    def compile_objects(self, sources, output_dir, include_dirs=..., depends=..., macros=..., extra_cflags=...):
        """
        Compile the given source files into a separate object file each,
        all beneath the *output_dir*.  A list of paths to object files
        is returned.

        *macros* has the same format as in distutils: a list of 1- or 2-tuples.
        If a 1-tuple (name,), the given name is considered undefined by
        the C preprocessor.
        If a 2-tuple (name, value), the given name is expanded into the
        given value by the C preprocessor.
        """
        ...
    
    def link_shared(self, output, objects, libraries=..., library_dirs=..., export_symbols=..., extra_ldflags=...): # -> None:
        """
        Create a shared library *output* linking the given *objects*
        and *libraries* (all strings).
        """
        ...
    
    def get_python_libraries(self): # -> list[str]:
        """
        Get the library arguments necessary to link with Python.
        """
        ...
    
    def get_python_library_dirs(self): # -> list[Incomplete]:
        """
        Get the library directories necessary to link with Python.
        """
        ...
    
    def get_python_include_dirs(self): # -> list[Incomplete]:
        """
        Get the include directories necessary to compile against the Python
        and Numpy C APIs.
        """
        ...
    
    def get_ext_filename(self, ext_name):
        """
        Given a C extension's module name, return its intended filename.
        """
        ...
    


