"""
This type stub file was generated by pyright.
"""

from numba.core.imputils import lower_builtin
from numba.core.extending import register_jitable

class StencilFuncLowerer:
    '''Callable class responsible for lowering calls to a specific StencilFunc.
    '''
    def __init__(self, sf) -> None:
        ...
    
    def __call__(self, context, builder, sig, args):
        ...
    


@register_jitable
def raise_if_incompatible_array_sizes(a, *args): # -> None:
    ...

def slice_addition(the_slice, addend): # -> slice:
    """ Called by stencil in Python mode to add the loop index to a
        user-specified slice.
    """
    ...

class StencilFunc:
    """
    A special type to hold stencil information for the IR.
    """
    id_counter = ...
    def __init__(self, kernel_ir, mode, options) -> None:
        ...
    
    def replace_return_with_setitem(self, blocks, index_vars, out_name): # -> list[Any]:
        """
        Find return statements in the IR and replace them with a SetItem
        call of the value "returned" by the kernel into the result array.
        Returns the block labels that contained return statements.
        """
        ...
    
    def add_indices_to_kernel(self, kernel, index_names, ndim, neighborhood, standard_indexed, typemap, calltypes):
        """
        Transforms the stencil kernel as specified by the user into one
        that includes each dimension's index variable as part of the getitem
        calls.  So, in effect array[-1] becomes array[index0-1].
        """
        ...
    
    def get_return_type(self, argtys): # -> tuple[Array, Any, Any]:
        ...
    
    def compile_for_argtys(self, argtys, kwtys, return_type, sigret):
        ...
    
    def copy_ir_with_calltypes(self, ir, calltypes): # -> tuple[Any, dict[Any, Any]]:
        """
        Create a copy of a given IR along with its calltype information.
        We need a copy of the calltypes because copy propagation applied
        to the copied IR will change the calltypes and make subsequent
        uses of the original IR invalid.
        """
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


def stencil(func_or_mode=..., **options): # -> StencilFunc | Callable[..., StencilFunc]:
    ...

@lower_builtin(stencil)
def stencil_dummy_lower(context, builder, sig, args): # -> Constant:
    "lowering for dummy stencil calls"
    ...

