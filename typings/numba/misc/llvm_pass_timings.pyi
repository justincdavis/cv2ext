"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from contextlib import contextmanager

class RecordLLVMPassTimings:
    """A helper context manager to track LLVM pass timings.
    """
    __slots__ = ...
    def __enter__(self): # -> Self:
        """Enables the pass timing in LLVM.
        """
        ...
    
    def __exit__(self, exc_val, exc_type, exc_tb): # -> None:
        """Reset timings and save report internally.
        """
        ...
    
    def get(self): # -> ProcessedPassTimings:
        """Retrieve timing data for processing.

        Returns
        -------
        timings: ProcessedPassTimings
        """
        ...
    


PassTimingRecord = ...
class ProcessedPassTimings:
    """A class for processing raw timing report from LLVM.

    The processing is done lazily so we don't waste time processing unused
    timing information.
    """
    def __init__(self, raw_data) -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def get_raw_data(self): # -> Any:
        """Returns the raw string data.

        Returns
        -------
        res: str
        """
        ...
    
    def get_total_time(self):
        """Compute the total time spend in all passes.

        Returns
        -------
        res: float
        """
        ...
    
    def list_records(self): # -> list[PassTimingRecord]:
        """Get the processed data for the timing report.

        Returns
        -------
        res: List[PassTimingRecord]
        """
        ...
    
    def list_top(self, n): # -> list[PassTimingRecord]:
        """Returns the top(n) most time-consuming (by wall-time) passes.

        Parameters
        ----------
        n: int
            This limits the maximum number of items to show.
            This function will show the ``n`` most time-consuming passes.

        Returns
        -------
        res: List[PassTimingRecord]
            Returns the top(n) most time-consuming passes in descending order.
        """
        ...
    
    def summary(self, topn=..., indent=...): # -> LiteralString:
        """Return a string summarizing the timing information.

        Parameters
        ----------
        topn: int; optional
            This limits the maximum number of items to show.
            This function will show the ``topn`` most time-consuming passes.
        indent: int; optional
            Set the indentation level. Defaults to 0 for no indentation.

        Returns
        -------
        res: str
        """
        ...
    


NamedTimings = ...
class PassTimingsCollection(Sequence):
    """A collection of pass timings.

    This class implements the ``Sequence`` protocol for accessing the
    individual timing records.
    """
    def __init__(self, name) -> None:
        ...
    
    @contextmanager
    def record(self, name): # -> Generator[None, Any, None]:
        """Record new timings and append to this collection.

        Note: this is mainly for internal use inside the compiler pipeline.

        See also ``RecordLLVMPassTimings``

        Parameters
        ----------
        name: str
            Name for the records.
        """
        ...
    
    def get_total_time(self): # -> int | None:
        """Computes the sum of the total time across all contained timings.

        Returns
        -------
        res: float or None
            Returns the total number of seconds or None if no timings were
            recorded
        """
        ...
    
    def list_longest_first(self): # -> list[Any]:
        """Returns the timings in descending order of total time duration.

        Returns
        -------
        res: List[ProcessedPassTimings]
        """
        ...
    
    @property
    def is_empty(self): # -> bool:
        """
        """
        ...
    
    def summary(self, topn=...): # -> LiteralString | Literal['No pass timings were recorded']:
        """Return a string representing the summary of the timings.

        Parameters
        ----------
        topn: int; optional, default=5.
            This limits the maximum number of items to show.
            This function will show the ``topn`` most time-consuming passes.

        Returns
        -------
        res: str

        See also ``ProcessedPassTimings.summary()``
        """
        ...
    
    def __getitem__(self, i):
        """Get the i-th timing record.

        Returns
        -------
        res: (name, timings)
            A named tuple with two fields:

            - name: str
            - timings: ProcessedPassTimings
        """
        ...
    
    def __len__(self): # -> int:
        """Length of this collection.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


