"""
This type stub file was generated by pyright.
"""

from numba.np.ufunc import deviceufunc
from numba.np.ufunc.deviceufunc import GUFuncCallSteps, GeneralizedUFunc, UFuncMechanism

class CUDAUFuncDispatcher:
    """
    Invoke the CUDA ufunc specialization for the given inputs.
    """
    def __init__(self, types_to_retty_kernels, pyfunc) -> None:
        ...
    
    def __call__(self, *args, **kws):
        """
        *args: numpy arrays or DeviceArrayBase (created by cuda.to_device).
               Cannot mix the two types in one call.

        **kws:
            stream -- cuda stream; when defined, asynchronous mode is used.
            out    -- output array. Can be a numpy array or DeviceArrayBase
                      depending on the input arguments.  Type must match
                      the input arguments.
        """
        ...
    
    def reduce(self, arg, stream=...): # -> Any:
        ...
    


class _CUDAGUFuncCallSteps(GUFuncCallSteps):
    __slots__ = ...
    def __init__(self, nin, nout, args, kwargs) -> None:
        ...
    
    def is_device_array(self, obj): # -> bool:
        ...
    
    def as_device_array(self, obj): # -> DeviceNDArray:
        ...
    
    def to_device(self, hostary): # -> DeviceRecord | DeviceNDArray:
        ...
    
    def to_host(self, devary, hostary):
        ...
    
    def allocate_device_array(self, shape, dtype): # -> DeviceNDArray:
        ...
    
    def launch_kernel(self, kernel, nelem, args): # -> None:
        ...
    


class CUDAGeneralizedUFunc(GeneralizedUFunc):
    def __init__(self, kernelmap, engine, pyfunc) -> None:
        ...
    


class CUDAUFuncMechanism(UFuncMechanism):
    """
    Provide CUDA specialization
    """
    DEFAULT_STREAM = ...
    def launch(self, func, count, stream, args): # -> None:
        ...
    
    def is_device_array(self, obj): # -> bool:
        ...
    
    def as_device_array(self, obj): # -> DeviceNDArray:
        ...
    
    def to_device(self, hostary, stream): # -> DeviceRecord | DeviceNDArray:
        ...
    
    def to_host(self, devary, stream):
        ...
    
    def allocate_device_array(self, shape, dtype, stream): # -> DeviceNDArray:
        ...
    
    def broadcast_device(self, ary, shape):
        ...
    


vectorizer_stager_source = ...
class CUDAVectorize(deviceufunc.DeviceVectorize):
    def build_ufunc(self): # -> CUDAUFuncDispatcher:
        ...
    


_gufunc_stager_source = ...
class CUDAGUFuncVectorize(deviceufunc.DeviceGUFuncVectorize):
    def build_ufunc(self): # -> CUDAGeneralizedUFunc:
        ...
    


