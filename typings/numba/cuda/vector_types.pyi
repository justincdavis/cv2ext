"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Tuple
from numba import types
from numba.core.extending import models
from numba.core.typing.templates import ConcreteTemplate

typing_registry = ...
impl_registry = ...
register = ...
register_attr = ...
register_global = ...
lower = ...
class VectorType(types.Type):
    def __init__(self, name, base_type, attr_names, user_facing_object) -> None:
        ...
    
    @property
    def base_type(self): # -> Any:
        ...
    
    @property
    def attr_names(self): # -> Any:
        ...
    
    @property
    def num_elements(self): # -> int:
        ...
    
    @property
    def user_facing_object(self): # -> Any:
        ...
    


def make_vector_type(name: str, base_type: types.Type, attr_names: Tuple[str, ...], user_facing_object) -> types.Type:
    """Create a vector type.

    Parameters
    ----------
    name: str
        The name of the type.
    base_type: numba.types.Type
        The primitive type for each element in the vector.
    attr_names: tuple of str
        Name for each attribute.
    user_facing_object: object
        The handle to be used in cuda kernel.
    """
    class _VectorType(VectorType):
        """Internal instantiation of VectorType."""
        ...
    
    
    class VectorTypeModel(models.StructModel):
        ...
    
    

def enable_vector_type_ctor(vector_type: VectorType, overloads: List[List[types.Type]]): # -> None:
    """Create typing and lowering for vector type constructor.

    Parameters
    ----------
    vector_type: VectorType
        The type whose constructor to type and lower.
    overloads: List of argument types
        A list containing different overloads of the constructor. Each base type
        in the argument list should either be primitive type or VectorType.
    """
    @register
    class CtorTemplate(ConcreteTemplate):
        ...
    
    

vector_types: Dict[str, VectorType] = ...
def build_constructor_overloads(base_type, vty_name, num_elements, arglists, l): # -> None:
    """
    For a given vector type, build a list of overloads for its constructor.
    """
    ...

