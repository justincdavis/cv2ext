"""
This type stub file was generated by pyright.
"""

from functools import cached_property
from numba.core import typing
from numba.core.base import BaseContext
from numba.core.callconv import BaseCallConv, MinimalCallConv

class CUDATypingContext(typing.BaseContext):
    def load_additional_registries(self): # -> None:
        ...
    
    def resolve_value_type(self, val): # -> Buffer | Any | ExternalFunctionPointer | Opaque | ExternalFunction | Module:
        ...
    


VALID_CHARS = ...
class CUDATargetContext(BaseContext):
    implement_powi_as_math_call = ...
    strict_alignment = ...
    def __init__(self, typingctx, target=...) -> None:
        ...
    
    @property
    def DIBuilder(self): # -> type[DIBuilder]:
        ...
    
    @property
    def enable_boundscheck(self): # -> Literal[False]:
        ...
    
    def create_module(self, name): # -> Module:
        ...
    
    def init(self): # -> None:
        ...
    
    def load_additional_registries(self): # -> None:
        ...
    
    def codegen(self): # -> JITCUDACodegen:
        ...
    
    @property
    def target_data(self): # -> TargetData:
        ...
    
    @cached_property
    def nonconst_module_attrs(self): # -> tuple[tuple[Module, Literal['threadIdx', 'blockDim', 'blockIdx', 'gridDim', 'laneid', 'warpsize']], ...]:
        """
        Some CUDA intrinsics are at the module level, but cannot be treated as
        constants, because they are loaded from a special register in the PTX.
        These include threadIdx, blockDim, etc.
        """
        ...
    
    @cached_property
    def call_conv(self): # -> CUDACallConv:
        ...
    
    def mangler(self, name, argtypes, *, abi_tags=..., uid=...): # -> str:
        ...
    
    def prepare_cuda_kernel(self, codelib, fndesc, debug, lineinfo, nvvm_options, filename, linenum, max_registers=...): # -> tuple[Any, Any]:
        """
        Adapt a code library ``codelib`` with the numba compiled CUDA kernel
        with name ``fname`` and arguments ``argtypes`` for NVVM.
        A new library is created with a wrapper function that can be used as
        the kernel entry point for the given kernel.

        Returns the new code library and the wrapper function.

        Parameters:

        codelib:       The CodeLibrary containing the device function to wrap
                       in a kernel call.
        fndesc:        The FunctionDescriptor of the source function.
        debug:         Whether to compile with debug.
        lineinfo:      Whether to emit line info.
        nvvm_options:  Dict of NVVM options used when compiling the new library.
        filename:      The source filename that the function is contained in.
        linenum:       The source line that the function is on.
        max_registers: The max_registers argument for the code library.
        """
        ...
    
    def generate_kernel_wrapper(self, library, fndesc, kernel_name, debug, lineinfo, filename, linenum):
        """
        Generate the kernel wrapper in the given ``library``.
        The function being wrapped is described by ``fndesc``.
        The wrapper function is returned.
        """
        ...
    
    def make_constant_array(self, builder, aryty, arr): # -> Any:
        """
        Unlike the parent version.  This returns a a pointer in the constant
        addrspace.
        """
        ...
    
    def insert_const_string(self, mod, string): # -> None:
        """
        Unlike the parent version.  This returns a a pointer in the constant
        addrspace.
        """
        ...
    
    def insert_string_const_addrspace(self, builder, string):
        """
        Insert a constant string in the constant addresspace and return a
        generic i8 pointer to the data.

        This function attempts to deduplicate.
        """
        ...
    
    def optimize_function(self, func): # -> None:
        """Run O1 function passes
        """
        ...
    
    def get_ufunc_info(self, ufunc_key):
        ...
    


class CUDACallConv(MinimalCallConv):
    ...


class CUDACABICallConv(BaseCallConv):
    """
    Calling convention aimed at matching the CUDA C/C++ ABI. The implemented
    function signature is:

        <Python return type> (<Python arguments>)

    Exceptions are unsupported in this convention.
    """
    def return_value(self, builder, retval):
        ...
    
    def return_user_exc(self, builder, exc, exc_args=..., loc=..., func_name=...):
        ...
    
    def return_status_propagate(self, builder, status):
        ...
    
    def get_function_type(self, restype, argtypes): # -> FunctionType:
        """
        Get the LLVM IR Function type for *restype* and *argtypes*.
        """
        ...
    
    def decorate_function(self, fn, args, fe_argtypes, noalias=...): # -> None:
        """
        Set names and attributes of function arguments.
        """
        ...
    
    def get_arguments(self, func):
        """
        Get the Python-level arguments of LLVM *func*.
        """
        ...
    
    def call_function(self, builder, callee, resty, argtys, args): # -> tuple[None, Any]:
        """
        Call the Numba-compiled *callee*.
        """
        ...
    
    def get_return_type(self, ty):
        ...
    


