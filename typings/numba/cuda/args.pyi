"""
This type stub file was generated by pyright.
"""

import abc

"""
Hints to wrap Kernel arguments to indicate how to manage host-device
memory transfers before & after the kernel call.
"""
class ArgHint(metaclass=abc.ABCMeta):
    def __init__(self, value) -> None:
        ...
    
    @abc.abstractmethod
    def to_device(self, retr, stream=...): # -> None:
        """
        :param stream: a stream to use when copying data
        :param retr:
            a list of clean-up work to do after the kernel's been run.
            Append 0-arg lambdas to it!
        :return: a value (usually an `DeviceNDArray`) to be passed to
            the kernel
        """
        ...
    


class In(ArgHint):
    def to_device(self, retr, stream=...): # -> DeviceRecord | DeviceNDArray:
        ...
    


class Out(ArgHint):
    def to_device(self, retr, stream=...): # -> DeviceRecord | DeviceNDArray:
        ...
    


class InOut(ArgHint):
    def to_device(self, retr, stream=...): # -> DeviceRecord | DeviceNDArray:
        ...
    


def wrap_arg(value, default=...): # -> ArgHint | InOut:
    ...

__all__ = ['In', 'Out', 'InOut', 'ArgHint', 'wrap_arg']
