"""
This type stub file was generated by pyright.
"""

from numba.tests.support import SerialMixin, TestCase

numba_cuda_dir = ...
test_data_dir = ...
class CUDATestCase(SerialMixin, TestCase):
    """
    For tests that use a CUDA device. Test methods in a CUDATestCase must not
    be run out of module order, because the ContextResettingTestCase may reset
    the context and destroy resources used by a normal CUDATestCase if any of
    its tests are run between tests from a CUDATestCase.
    """
    def setUp(self): # -> None:
        ...
    
    def tearDown(self): # -> None:
        ...
    


class ContextResettingTestCase(CUDATestCase):
    """
    For tests where the context needs to be reset after each test. Typically
    these inspect or modify parts of the context that would usually be expected
    to be internal implementation details (such as the state of allocations and
    deallocations, etc.).
    """
    def tearDown(self): # -> None:
        ...
    


def ensure_supported_ccs_initialized(): # -> None:
    ...

def skip_on_cudasim(reason): # -> Callable[[_FT], _FT]:
    """Skip this test if running on the CUDA simulator"""
    ...

def skip_unless_cudasim(reason): # -> Callable[[_FT], _FT]:
    """Skip this test if running on CUDA hardware"""
    ...

def skip_unless_conda_cudatoolkit(reason): # -> Callable[[_FT], _FT]:
    """Skip test if the CUDA toolkit was not installed by Conda"""
    ...

def skip_if_external_memmgr(reason): # -> Callable[[_FT], _FT]:
    """Skip test if an EMM Plugin is in use"""
    ...

def skip_under_cuda_memcheck(reason): # -> Callable[[_FT], _FT]:
    ...

def skip_without_nvdisasm(reason): # -> Callable[[_FT], _FT]:
    ...

def skip_with_nvdisasm(reason): # -> Callable[[_FT], _FT]:
    ...

def skip_on_arm(reason): # -> Callable[[_FT], _FT]:
    ...

def skip_if_cuda_includes_missing(fn):
    ...

def skip_if_mvc_enabled(reason): # -> Callable[[_FT], _FT]:
    """Skip a test if Minor Version Compatibility is enabled"""
    ...

def skip_if_mvc_libraries_unavailable(fn):
    ...

def cc_X_or_above(major, minor): # -> Any | Literal[True]:
    ...

def skip_unless_cc_50(fn):
    ...

def skip_unless_cc_53(fn):
    ...

def skip_unless_cc_60(fn):
    ...

def skip_unless_cc_75(fn):
    ...

def xfail_unless_cudasim(fn):
    ...

def skip_with_cuda_python(reason): # -> Callable[[_FT], _FT]:
    ...

def cudadevrt_missing(): # -> bool:
    ...

def skip_if_cudadevrt_missing(fn):
    ...

class ForeignArray:
    """
    Class for emulating an array coming from another library through the CUDA
    Array interface. This just hides a DeviceNDArray so that it doesn't look
    like a DeviceNDArray.
    """
    def __init__(self, arr) -> None:
        ...
    


