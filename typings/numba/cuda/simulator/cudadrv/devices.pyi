"""
This type stub file was generated by pyright.
"""

_MemoryInfo = ...
class FakeCUDADevice:
    def __init__(self) -> None:
        ...
    


class FakeCUDAContext:
    '''
    This stub implements functionality only for simulating a single GPU
    at the moment.
    '''
    def __init__(self, device_id) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    @property
    def id(self): # -> Any:
        ...
    
    @property
    def device(self): # -> FakeCUDADevice:
        ...
    
    @property
    def compute_capability(self): # -> tuple[Literal[5], Literal[2]]:
        ...
    
    def reset(self): # -> None:
        ...
    
    def get_memory_info(self): # -> _MemoryInfo:
        """
        Cross-platform free / total host memory is hard without external
        dependencies, e.g. `psutil` - so return infinite memory to maintain API
        type compatibility
        """
        ...
    
    def memalloc(self, sz): # -> ndarray[Any, Any]:
        """
        Allocates memory on the simulated device
        At present, there is no division between simulated
        host memory and simulated device memory.
        """
        ...
    
    def memhostalloc(self, sz, mapped=..., portable=..., wc=...): # -> ndarray[Any, Any]:
        '''Allocates memory on the host'''
        ...
    


class FakeDeviceList:
    '''
    This stub implements a device list containing a single GPU. It also
    keeps track of the GPU status, i.e. whether the context is closed or not,
    which may have been set by the user calling reset()
    '''
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, devnum):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __iter__(self): # -> Iterator[FakeCUDAContext]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def current(self): # -> FakeCUDAContext | None:
        ...
    


gpus = ...
def reset(): # -> None:
    ...

def get_context(devnum=...): # -> FakeCUDAContext:
    ...

def require_context(func):
    '''
    In the simulator, a context is always "available", so this is a no-op.
    '''
    ...

