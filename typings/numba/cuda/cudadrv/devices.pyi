"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager

"""
Expose each GPU devices directly.

This module implements a API that is like the "CUDA runtime" context manager
for managing CUDA context stack and clean up.  It relies on thread-local globals
to separate the context stack management of each thread. Contexts are also
shareable among threads.  Only the main thread can destroy Contexts.

Note:
- This module must be imported by the main-thread.

"""
class _DeviceList:
    def __getattr__(self, attr): # -> list[_DeviceContextManager]:
        ...
    
    def __getitem__(self, devnum):
        '''
        Returns the context manager for device *devnum*.
        '''
        ...
    
    def __str__(self) -> str:
        ...
    
    def __iter__(self): # -> Iterator[_DeviceContextManager]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def current(self): # -> None:
        """Returns the active device or None if there's no active device
        """
        ...
    


class _DeviceContextManager:
    """
    Provides a context manager for executing in the context of the chosen
    device. The normal use of instances of this type is from
    ``numba.cuda.gpus``. For example, to execute on device 2::

       with numba.cuda.gpus[2]:
           d_a = numba.cuda.to_device(a)

    to copy the array *a* onto device 2, referred to by *d_a*.
    """
    def __init__(self, device) -> None:
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class _Runtime:
    """Emulate the CUDA runtime context management.

    It owns all Devices and Contexts.
    Keeps at most one Context per Device
    """
    def __init__(self) -> None:
        ...
    
    @contextmanager
    def ensure_context(self): # -> Generator[None, Any, None]:
        """Ensure a CUDA context is available inside the context.

        On entrance, queries the CUDA driver for an active CUDA context and
        attaches it in TLS for subsequent calls so they do not need to query
        the CUDA driver again.  On exit, detach the CUDA context from the TLS.

        This will allow us to pickup thirdparty activated CUDA context in
        any top-level Numba CUDA API.
        """
        ...
    
    def get_or_create_context(self, devnum): # -> Any:
        """Returns the primary context and push+create it if needed
        for *devnum*.  If *devnum* is None, use the active CUDA context (must
        be primary) or create a new one with ``devnum=0``.
        """
        ...
    
    def reset(self): # -> None:
        """Clear all contexts in the thread.  Destroy the context if and only
        if we are in the main thread.
        """
        ...
    


_runtime = ...
gpus = ...
def get_context(devnum=...): # -> Any:
    """Get the current device or use a device by device number, and
    return the CUDA context.
    """
    ...

def require_context(fn): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    """
    A decorator that ensures a CUDA context is available when *fn* is executed.

    Note: The function *fn* cannot switch CUDA-context.
    """
    ...

def reset(): # -> None:
    """Reset the CUDA subsystem for the current thread.

    In the main thread:
    This removes all CUDA contexts.  Only use this at shutdown or for
    cleaning up between tests.

    In non-main threads:
    This clear the CUDA context stack only.

    """
    ...

