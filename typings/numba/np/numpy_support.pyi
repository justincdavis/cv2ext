"""
This type stub file was generated by pyright.
"""

import collections

numpy_version = ...
FROM_DTYPE = ...
re_typestr = ...
re_datetimestr = ...
sizeof_unicode_char = ...
def from_dtype(dtype): # -> Record | UnicodeCharSeq | CharSeq | NPTimedelta | NPDatetime | NestedArray:
    """
    Return a Numba Type instance corresponding to the given Numpy *dtype*.
    NotImplementedError is raised on unsupported Numpy dtypes.
    """
    ...

_as_dtype_letters = ...
def as_dtype(nbtype): # -> dtype[Any] | dtype[bool_] | dtype[void] | dtype[object_]:
    """
    Return a numpy dtype instance corresponding to the given Numba type.
    NotImplementedError is if no correspondence is known.
    """
    ...

def as_struct_dtype(rec): # -> dtype[Any]:
    """Convert Numba Record type to NumPy structured dtype
    """
    ...

def map_arrayscalar_type(val): # -> Record | UnicodeCharSeq | CharSeq | NPTimedelta | NPDatetime | NestedArray:
    ...

def is_array(val): # -> bool:
    ...

def map_layout(val): # -> Literal['C', 'F', 'A']:
    ...

def select_array_wrapper(inputs): # -> int:
    """
    Given the array-compatible input types to an operation (e.g. ufunc),
    select the appropriate input for wrapping the operation output,
    according to each input's __array_priority__.

    An index into *inputs* is returned.
    """
    ...

def resolve_output_type(context, inputs, formal_output):
    """
    Given the array-compatible input types to an operation (e.g. ufunc),
    and the operation's formal output type (a types.Array instance),
    resolve the actual output type using the typing *context*.

    This uses a mechanism compatible with Numpy's __array_priority__ /
    __array_wrap__.
    """
    ...

def supported_ufunc_loop(ufunc, loop): # -> bool:
    """Return whether the *loop* for the *ufunc* is supported -in nopython-.

    *loop* should be a UFuncLoopSpec instance, and *ufunc* a numpy ufunc.

    For ufuncs implemented using the ufunc_db, it is supported if the ufunc_db
    contains a lowering definition for 'loop' in the 'ufunc' entry.

    For other ufuncs, it is type based. The loop will be considered valid if it
    only contains the following letter types: '?bBhHiIlLqQfd'. Note this is
    legacy and when implementing new ufuncs the ufunc_db should be preferred,
    as it allows for a more fine-grained incremental support.
    """
    ...

class UFuncLoopSpec(collections.namedtuple('_UFuncLoopSpec', ('inputs', 'outputs', 'ufunc_sig'))):
    """
    An object describing a ufunc loop's inner types.  Properties:
    - inputs: the inputs' Numba types
    - outputs: the outputs' Numba types
    - ufunc_sig: the string representing the ufunc's type signature, in
      Numpy format (e.g. "ii->i")
    """
    __slots__ = ...
    @property
    def numpy_inputs(self): # -> list[dtype[Any] | dtype[bool_] | Any | dtype[void] | dtype[object_]]:
        ...
    
    @property
    def numpy_outputs(self): # -> list[dtype[Any] | dtype[bool_] | Any | dtype[void] | dtype[object_]]:
        ...
    


def ufunc_can_cast(from_, to, has_mixed_inputs, casting=...): # -> bool:
    """
    A variant of np.can_cast() that can allow casting any integer to
    any real or complex type, in case the operation has mixed-kind
    inputs.

    For example we want `np.power(float32, int32)` to be computed using
    SP arithmetic and return `float32`.
    However, `np.sqrt(int32)` should use DP arithmetic and return `float64`.
    """
    ...

def ufunc_find_matching_loop(ufunc, arg_types): # -> UFuncLoopSpec | None:
    """Find the appropriate loop to be used for a ufunc based on the types
    of the operands

    ufunc        - The ufunc we want to check
    arg_types    - The tuple of arguments to the ufunc, including any
                   explicit output(s).
    return value - A UFuncLoopSpec identifying the loop, or None
                   if no matching loop is found.
    """
    ...

def from_struct_dtype(dtype): # -> Record:
    """Convert a NumPy structured dtype to Numba Record type
    """
    ...

def carray(ptr, shape, dtype=...): # -> ndarray[Any, dtype[float64]]:
    """
    Return a Numpy array view over the data pointed to by *ptr* with the
    given *shape*, in C order.  If *dtype* is given, it is used as the
    array's dtype, otherwise the array's dtype is inferred from *ptr*'s type.
    """
    ...

def farray(ptr, shape, dtype=...): # -> ndarray[Any, dtype[float64]]:
    """
    Return a Numpy array view over the data pointed to by *ptr* with the
    given *shape*, in Fortran order.  If *dtype* is given, it is used as the
    array's dtype, otherwise the array's dtype is inferred from *ptr*'s type.
    """
    ...

def is_contiguous(dims, strides, itemsize): # -> bool:
    """Is the given shape, strides, and itemsize of C layout?

    Note: The code is usable as a numba-compiled function
    """
    ...

def is_fortran(dims, strides, itemsize): # -> bool:
    """Is the given shape, strides, and itemsize of F layout?

    Note: The code is usable as a numba-compiled function
    """
    ...

def type_can_asarray(arr): # -> bool:
    """ Returns True if the type of 'arr' is supported by the Numba `np.asarray`
    implementation, False otherwise.
    """
    ...

def type_is_scalar(typ): # -> bool:
    """ Returns True if the type of 'typ' is a scalar type, according to
    NumPy rules. False otherwise.
    https://numpy.org/doc/stable/reference/arrays.scalars.html#built-in-scalar-types
    """
    ...

def check_is_integer(v, name): # -> None:
    """Raises TypingError if the value is not an integer."""
    ...

def lt_floats(a, b): # -> Any | bool:
    ...

def lt_complex(a, b): # -> bool:
    ...

