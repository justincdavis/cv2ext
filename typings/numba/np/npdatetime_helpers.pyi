"""
This type stub file was generated by pyright.
"""

"""
Helper functions for np.timedelta64 and np.datetime64.
For now, multiples-of-units (for example timedeltas expressed in tens
of seconds) are not supported.
"""
DATETIME_UNITS = ...
NAT = ...
def same_kind(src, dest): # -> bool:
    """
    Whether the *src* and *dest* units are of the same kind.
    """
    ...

def can_cast_timedelta_units(src, dest): # -> bool:
    ...

_factors = ...
def get_timedelta_conversion_factor(src_unit, dest_unit): # -> Literal[1] | None:
    """
    Return an integer multiplier allowing to convert from timedeltas
    of *src_unit* to *dest_unit*.
    """
    ...

def get_datetime_timedelta_conversion(datetime_unit, timedelta_unit): # -> tuple[Any, Literal[1], Literal[1]] | tuple[Any, Any | int, Literal[400, 2800, 1, 4800, 33600]] | tuple[Any, Literal[146097, 1], Any | int]:
    """
    Compute a possible conversion for combining *datetime_unit* and
    *timedelta_unit* (presumably for adding or subtracting).
    Return (result unit, integer datetime multiplier, integer timedelta
    multiplier). RuntimeError is raised if the combination is impossible.
    """
    ...

def combine_datetime_timedelta_units(datetime_unit, timedelta_unit): # -> None:
    """
    Return the unit result of combining *datetime_unit* with *timedelta_unit*
    (e.g. by adding or subtracting).  None is returned if combining
    those units is forbidden.
    """
    ...

def get_best_unit(unit_a, unit_b):
    """
    Get the best (i.e. finer-grained) of two units.
    """
    ...

def datetime_minimum(a, b): # -> None:
    ...

def datetime_maximum(a, b): # -> None:
    ...

