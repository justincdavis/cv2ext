"""
This type stub file was generated by pyright.
"""

from numba.core.extending import register_jitable

"""
Algorithmic implementations for generating different types
of random distributions.
"""
@register_jitable
def np_log1p(x): # -> Any:
    ...

@register_jitable
def np_log1pf(x):
    ...

@register_jitable
def random_rayleigh(bitgen, mode):
    ...

@register_jitable
def np_expm1(x): # -> Any:
    ...

@register_jitable
def random_standard_normal(bitgen): # -> Any | None:
    ...

@register_jitable
def random_standard_normal_f(bitgen): # -> Signature | None:
    ...

@register_jitable
def random_standard_exponential(bitgen): # -> Any | None:
    ...

@register_jitable
def random_standard_exponential_f(bitgen): # -> Signature | None:
    ...

@register_jitable
def random_standard_exponential_inv(bitgen): # -> Any:
    ...

@register_jitable
def random_standard_exponential_inv_f(bitgen):
    ...

@register_jitable
def random_standard_gamma(bitgen, shape): # -> Any | float | None:
    ...

@register_jitable
def random_standard_gamma_f(bitgen, shape): # -> Signature | None:
    ...

@register_jitable
def random_normal(bitgen, loc, scale):
    ...

@register_jitable
def random_normal_f(bitgen, loc, scale): # -> Signature:
    ...

@register_jitable
def random_exponential(bitgen, scale):
    ...

@register_jitable
def random_uniform(bitgen, lower, range):
    ...

@register_jitable
def random_gamma(bitgen, shape, scale):
    ...

@register_jitable
def random_gamma_f(bitgen, shape, scale): # -> Signature:
    ...

@register_jitable
def random_beta(bitgen, a, b): # -> Any | None:
    ...

@register_jitable
def random_chisquare(bitgen, df):
    ...

@register_jitable
def random_f(bitgen, dfnum, dfden):
    ...

@register_jitable
def random_standard_cauchy(bitgen):
    ...

@register_jitable
def random_pareto(bitgen, a): # -> Any:
    ...

@register_jitable
def random_weibull(bitgen, a): # -> float:
    ...

@register_jitable
def random_power(bitgen, a):
    ...

@register_jitable
def random_laplace(bitgen, loc, scale):
    ...

@register_jitable
def random_logistic(bitgen, loc, scale):
    ...

@register_jitable
def random_lognormal(bitgen, mean, sigma): # -> Any:
    ...

@register_jitable
def random_standard_t(bitgen, df):
    ...

@register_jitable
def random_wald(bitgen, mean, scale):
    ...

@register_jitable
def random_geometric_search(bitgen, p): # -> int:
    ...

@register_jitable
def random_geometric_inversion(bitgen, p): # -> Any:
    ...

@register_jitable
def random_geometric(bitgen, p): # -> int | Any:
    ...

@register_jitable
def random_zipf(bitgen, a): # -> Any | None:
    ...

@register_jitable
def random_triangular(bitgen, left, mode, right):
    ...

@register_jitable
def random_loggam(x): # -> float:
    ...

@register_jitable
def random_poisson_mult(bitgen, lam): # -> int | None:
    ...

@register_jitable
def random_poisson_ptrs(bitgen, lam): # -> int | None:
    ...

@register_jitable
def random_poisson(bitgen, lam): # -> int | None:
    ...

@register_jitable
def random_negative_binomial(bitgen, n, p): # -> int | None:
    ...

@register_jitable
def random_noncentral_chisquare(bitgen, df, nonc): # -> float:
    ...

@register_jitable
def random_noncentral_f(bitgen, dfnum, dfden, nonc):
    ...

@register_jitable
def random_logseries(bitgen, p): # -> Signature | Literal[1, 2] | None:
    ...

@register_jitable
def random_binomial_btpe(bitgen, n, p): # -> int | None:
    ...

@register_jitable
def random_binomial_inversion(bitgen, n, p): # -> int:
    ...

@register_jitable
def random_binomial(bitgen, n, p): # -> int | None:
    ...

