"""
This type stub file was generated by pyright.
"""

from numba.core.extending import register_jitable

@register_jitable
def gen_mask(max):
    ...

@register_jitable
def buffered_bounded_bool(bitgen, off, rng, bcnt, buf): # -> tuple[Any, Any, Any] | tuple[Any, Any | Literal[31], Any]:
    ...

@register_jitable
def buffered_uint8(bitgen, bcnt, buf): # -> tuple[Any | Signature, Any | Literal[3], Any]:
    ...

@register_jitable
def buffered_uint16(bitgen, bcnt, buf): # -> tuple[Any | Signature, Any | Literal[1], Any]:
    ...

@register_jitable
def buffered_bounded_lemire_uint8(bitgen, rng, bcnt, buf): # -> tuple[Any, Any | Literal[3], Any]:
    """
    Generates a random unsigned 8 bit integer bounded
    within a given interval using Lemire's rejection.

    The buffer acts as storage for a 32 bit integer
    drawn from the associated BitGenerator so that
    multiple integers of smaller bitsize can be generated
    from a single draw of the BitGenerator.
    """
    ...

@register_jitable
def buffered_bounded_lemire_uint16(bitgen, rng, bcnt, buf): # -> tuple[Any, Any | Literal[1], Any]:
    """
    Generates a random unsigned 16 bit integer bounded
    within a given interval using Lemire's rejection.

    The buffer acts as storage for a 32 bit integer
    drawn from the associated BitGenerator so that
    multiple integers of smaller bitsize can be generated
    from a single draw of the BitGenerator.
    """
    ...

@register_jitable
def buffered_bounded_lemire_uint32(bitgen, rng):
    """
    Generates a random unsigned 32 bit integer bounded
    within a given interval using Lemire's rejection.
    """
    ...

@register_jitable
def bounded_lemire_uint64(bitgen, rng):
    """
    Generates a random unsigned 64 bit integer bounded
    within a given interval using Lemire's rejection.
    """
    ...

@register_jitable
def random_bounded_uint64_fill(bitgen, low, rng, size, dtype): # -> NDArray[float64]:
    """
    Returns a new array of given size with 64 bit integers
    bounded by given interval.
    """
    ...

@register_jitable
def random_bounded_uint32_fill(bitgen, low, rng, size, dtype): # -> NDArray[float64]:
    """
    Returns a new array of given size with 32 bit integers
    bounded by given interval.
    """
    ...

@register_jitable
def random_bounded_uint16_fill(bitgen, low, rng, size, dtype): # -> NDArray[float64]:
    """
    Returns a new array of given size with 16 bit integers
    bounded by given interval.
    """
    ...

@register_jitable
def random_bounded_uint8_fill(bitgen, low, rng, size, dtype): # -> NDArray[float64]:
    """
    Returns a new array of given size with 8 bit integers
    bounded by given interval.
    """
    ...

@register_jitable
def random_bounded_bool_fill(bitgen, low, rng, size, dtype): # -> NDArray[float64]:
    """
    Returns a new array of given size with boolean values.
    """
    ...

@register_jitable
def random_interval(bitgen, max_val): # -> Signature | Literal[0]:
    ...

