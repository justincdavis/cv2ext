"""
This type stub file was generated by pyright.
"""

import operator
from numba.core import types
from numba.core.imputils import lower_builtin, lower_constant
from numba.extending import overload_method

"""
Implementation of operations on numpy timedelta64.
"""
TIMEDELTA64 = ...
NAT = ...
TIMEDELTA_BINOP_SIG = ...
def scale_by_constant(builder, val, factor):
    """
    Multiply *val* by the constant *factor*.
    """
    ...

def unscale_by_constant(builder, val, factor):
    """
    Divide *val* by the constant *factor*.
    """
    ...

def add_constant(builder, val, const):
    """
    Add constant *const* to *val*.
    """
    ...

def scale_timedelta(context, builder, val, srcty, destty):
    """
    Scale the timedelta64 *val* from *srcty* to *destty*
    (both numba.types.NPTimedelta instances)
    """
    ...

def normalize_timedeltas(context, builder, left, right, leftty, rightty): # -> tuple[Any, Any]:
    """
    Scale either *left* or *right* to the other's unit, in order to have
    homogeneous units.
    """
    ...

def alloc_timedelta_result(builder, name=...):
    """
    Allocate a NaT-initialized datetime64 (or timedelta64) result slot.
    """
    ...

def alloc_boolean_result(builder, name=...):
    """
    Allocate an uninitialized boolean result slot.
    """
    ...

def is_not_nat(builder, val):
    """
    Return a predicate which is true if *val* is not NaT.
    """
    ...

def are_not_nat(builder, vals):
    """
    Return a predicate which is true if all of *vals* are not NaT.
    """
    ...

normal_year_months = ...
leap_year_months = ...
normal_year_months_acc = ...
leap_year_months_acc = ...
@lower_constant(types.NPDatetime)
@lower_constant(types.NPTimedelta)
def datetime_constant(context, builder, ty, pyval): # -> Constant:
    ...

@lower_builtin(operator.pos, types.NPTimedelta)
def timedelta_pos_impl(context, builder, sig, args):
    ...

@lower_builtin(operator.neg, types.NPTimedelta)
def timedelta_neg_impl(context, builder, sig, args):
    ...

@lower_builtin(abs, types.NPTimedelta)
def timedelta_abs_impl(context, builder, sig, args):
    ...

def timedelta_sign_impl(context, builder, sig, args):
    """
    np.sign(timedelta64)
    """
    ...

@lower_builtin(operator.add, *TIMEDELTA_BINOP_SIG)
@lower_builtin(operator.iadd, *TIMEDELTA_BINOP_SIG)
def timedelta_add_impl(context, builder, sig, args):
    ...

@lower_builtin(operator.sub, *TIMEDELTA_BINOP_SIG)
@lower_builtin(operator.isub, *TIMEDELTA_BINOP_SIG)
def timedelta_sub_impl(context, builder, sig, args):
    ...

@lower_builtin(operator.mul, types.NPTimedelta, types.Integer)
@lower_builtin(operator.imul, types.NPTimedelta, types.Integer)
@lower_builtin(operator.mul, types.NPTimedelta, types.Float)
@lower_builtin(operator.imul, types.NPTimedelta, types.Float)
def timedelta_times_number(context, builder, sig, args):
    ...

@lower_builtin(operator.mul, types.Integer, types.NPTimedelta)
@lower_builtin(operator.imul, types.Integer, types.NPTimedelta)
@lower_builtin(operator.mul, types.Float, types.NPTimedelta)
@lower_builtin(operator.imul, types.Float, types.NPTimedelta)
def number_times_timedelta(context, builder, sig, args):
    ...

@lower_builtin(operator.truediv, types.NPTimedelta, types.Integer)
@lower_builtin(operator.itruediv, types.NPTimedelta, types.Integer)
@lower_builtin(operator.floordiv, types.NPTimedelta, types.Integer)
@lower_builtin(operator.ifloordiv, types.NPTimedelta, types.Integer)
@lower_builtin(operator.truediv, types.NPTimedelta, types.Float)
@lower_builtin(operator.itruediv, types.NPTimedelta, types.Float)
@lower_builtin(operator.floordiv, types.NPTimedelta, types.Float)
@lower_builtin(operator.ifloordiv, types.NPTimedelta, types.Float)
def timedelta_over_number(context, builder, sig, args):
    ...

@lower_builtin(operator.truediv, *TIMEDELTA_BINOP_SIG)
@lower_builtin(operator.itruediv, *TIMEDELTA_BINOP_SIG)
def timedelta_over_timedelta(context, builder, sig, args):
    ...

@lower_builtin(operator.floordiv, *TIMEDELTA_BINOP_SIG)
def timedelta_floor_div_timedelta(context, builder, sig, args):
    ...

def timedelta_mod_timedelta(context, builder, sig, args):
    ...

timedelta_eq_timedelta_impl = ...
timedelta_ne_timedelta_impl = ...
timedelta_lt_timedelta_impl = ...
timedelta_le_timedelta_impl = ...
timedelta_gt_timedelta_impl = ...
timedelta_ge_timedelta_impl = ...
def is_leap_year(builder, year_val):
    """
    Return a predicate indicating whether *year_val* (offset by 1970) is a
    leap year.
    """
    ...

def year_to_days(builder, year_val):
    """
    Given a year *year_val* (offset to 1970), return the number of days
    since the 1970 epoch.
    """
    ...

def reduce_datetime_for_unit(builder, dt_val, src_unit, dest_unit): # -> tuple[Any, Any] | tuple[Any, Literal['W']] | tuple[Any, Literal['D']]:
    ...

def convert_datetime_for_arith(builder, dt_val, src_unit, dest_unit):
    """
    Convert datetime *dt_val* from *src_unit* to *dest_unit*.
    """
    ...

_datetime_plus_timedelta = ...
_datetime_minus_timedelta = ...
@lower_builtin(operator.add, types.NPDatetime, types.NPTimedelta)
@lower_builtin(operator.iadd, types.NPDatetime, types.NPTimedelta)
def datetime_plus_timedelta(context, builder, sig, args):
    ...

@lower_builtin(operator.add, types.NPTimedelta, types.NPDatetime)
@lower_builtin(operator.iadd, types.NPTimedelta, types.NPDatetime)
def timedelta_plus_datetime(context, builder, sig, args):
    ...

@lower_builtin(operator.sub, types.NPDatetime, types.NPTimedelta)
@lower_builtin(operator.isub, types.NPDatetime, types.NPTimedelta)
def datetime_minus_timedelta(context, builder, sig, args):
    ...

@lower_builtin(operator.sub, types.NPDatetime, types.NPDatetime)
def datetime_minus_datetime(context, builder, sig, args):
    ...

datetime_eq_datetime_impl = ...
datetime_ne_datetime_impl = ...
datetime_lt_datetime_impl = ...
datetime_le_datetime_impl = ...
datetime_gt_datetime_impl = ...
datetime_ge_datetime_impl = ...
datetime_maximum_impl = ...
datetime_fmax_impl = ...
datetime_minimum_impl = ...
datetime_fmin_impl = ...
timedelta_maximum_impl = ...
timedelta_fmax_impl = ...
timedelta_minimum_impl = ...
timedelta_fmin_impl = ...
@overload_method(types.NPTimedelta, '__hash__')
@overload_method(types.NPDatetime, '__hash__')
def ol_hash_npdatetime(x): # -> Callable[..., int32]:
    ...

