"""
This type stub file was generated by pyright.
"""

from numba.core.compiler_lock import global_compiler_lock

_wrapper_info = ...
def build_slow_loop_body(context, func, builder, arrays, out, offsets, store_offset, signature, pyapi, env):
    ...

def build_obj_loop_body(context, func, builder, arrays, out, offsets, store_offset, signature, pyapi, envptr, env):
    ...

def build_fast_loop_body(context, func, builder, arrays, out, offsets, store_offset, signature, ind, pyapi, env):
    ...

def build_ufunc_wrapper(library, context, fname, signature, objmode, cres): # -> _wrapper_info:
    """
    Wrap the scalar function with a loop that iterates over the arguments

    Returns
    -------
    (library, env, name)
    """
    ...

class UArrayArg:
    def __init__(self, context, builder, args, steps, i, fe_type) -> None:
        ...
    
    def load_direct(self, byteoffset):
        """
        Generic load from the given *byteoffset*.  load_aligned() is
        preferred if possible.
        """
        ...
    
    def load_aligned(self, ind):
        ...
    
    def store_direct(self, value, byteoffset): # -> None:
        ...
    
    def store_aligned(self, value, ind): # -> None:
        ...
    


GufWrapperCache = ...
class _GufuncWrapper:
    def __init__(self, py_func, cres, sin, sout, cache, is_parfors) -> None:
        """
        The *is_parfors* argument is a boolean that indicates if the GUfunc
        being built is to be used as a ParFors kernel. If True, it disables
        the caching on the wrapper as a separate unit because it will be linked
        into the caller function and cached along with it.
        """
        ...
    
    @property
    def library(self):
        ...
    
    @property
    def context(self):
        ...
    
    @property
    def call_conv(self):
        ...
    
    @property
    def signature(self):
        ...
    
    @property
    def fndesc(self):
        ...
    
    @property
    def env(self):
        ...
    
    @global_compiler_lock
    def build(self): # -> _wrapper_info:
        ...
    
    def gen_loop_body(self, builder, pyapi, func, args): # -> tuple[Any, Any]:
        ...
    
    def gen_prologue(self, builder, pyapi): # -> None:
        ...
    
    def gen_epilogue(self, builder, pyapi): # -> None:
        ...
    


class _GufuncObjectWrapper(_GufuncWrapper):
    def gen_loop_body(self, builder, pyapi, func, args): # -> tuple[Any, Any]:
        ...
    
    def gen_prologue(self, builder, pyapi): # -> None:
        ...
    
    def gen_epilogue(self, builder, pyapi): # -> None:
        ...
    


def build_gufunc_wrapper(py_func, cres, sin, sout, cache, is_parfors):
    ...

class GUArrayArg:
    def __init__(self, context, builder, args, steps, i, step_offset, typ, syms, sym_dim) -> None:
        ...
    
    def get_array_at_offset(self, ind):
        ...
    


class _ScalarArgLoader:
    """
    Handle GFunc argument loading where a scalar type is used in the core
    function.
    Note: It still has a stride because the input to the gufunc can be an array
          for this argument.
    """
    def __init__(self, dtype, stride) -> None:
        ...
    
    def load(self, context, builder, data, ind):
        ...
    


class _ArrayArgLoader:
    """
    Handle GUFunc argument loading where an array is expected.
    """
    def __init__(self, dtype, ndim, core_step, as_scalar, shape, strides) -> None:
        ...
    
    def load(self, context, builder, data, ind):
        ...
    


class _ArrayAsScalarArgLoader(_ArrayArgLoader):
    """
    Handle GUFunc argument loading where the shape signature specifies
    a scalar "()" but a 1D array is used for the type of the core function.
    """
    ...


