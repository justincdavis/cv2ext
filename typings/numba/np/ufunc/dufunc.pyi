"""
This type stub file was generated by pyright.
"""

from numba.core import serialize
from numba.np.ufunc import _internal

def make_dufunc_kernel(_dufunc): # -> type[DUFuncKernel]:
    class DUFuncKernel(npyimpl._Kernel):
        """
        npyimpl._Kernel subclass responsible for lowering a DUFunc kernel
        (element-wise function) inside a broadcast loop (which is
        generated by npyimpl.numpy_ufunc_kernel()).
        """
        ...
    
    

class DUFuncLowerer:
    '''Callable class responsible for lowering calls to a specific DUFunc.
    '''
    def __init__(self, dufunc) -> None:
        ...
    
    def __call__(self, context, builder, sig, args):
        ...
    


class DUFunc(serialize.ReduceMixin, _internal._DUFunc):
    """
    Dynamic universal function (DUFunc) intended to act like a normal
    Numpy ufunc, but capable of call-time (just-in-time) compilation
    of fast loops specialized to inputs.
    """
    __base_kwargs = ...
    def __init__(self, py_func, identity=..., cache=..., targetoptions=...) -> None:
        ...
    
    def build_ufunc(self): # -> Self:
        """
        For compatibility with the various *UFuncBuilder classes.
        """
        ...
    
    @property
    def targetoptions(self):
        ...
    
    @property
    def nin(self):
        ...
    
    @property
    def nout(self):
        ...
    
    @property
    def nargs(self):
        ...
    
    @property
    def ntypes(self):
        ...
    
    @property
    def types(self):
        ...
    
    @property
    def identity(self):
        ...
    
    @property
    def signature(self):
        ...
    
    def disable_compile(self): # -> None:
        """
        Disable the compilation of new signatures at call time.
        """
        ...
    
    def add(self, sig):
        """
        Compile the DUFunc for the given signature.
        """
        ...
    
    def __call__(self, *args, **kws):
        """
        Allow any argument that has overridden __array_ufunc__ (NEP-18)
        to take control of DUFunc.__call__.
        """
        ...
    
    def find_ewise_function(self, ewise_types): # -> tuple[None, None] | tuple[Any, Any]:
        """
        Given a tuple of element-wise argument types, find a matching
        signature in the dispatcher.

        Return a 2-tuple containing the matching signature, and
        compilation result.  Will return two None's if no matching
        signature was found.
        """
        ...
    


