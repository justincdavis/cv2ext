"""
This type stub file was generated by pyright.
"""

import operator

"""
Overloads for ClassInstanceType for built-in functions that call dunder methods
on an object.
"""
def class_instance_overload(target): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | None]]:
    """
    Decorator to add an overload for target that applies when the first argument
    is a ClassInstanceType.
    """
    ...

def extract_template(template, name):
    """
    Extract a code-generated function from a string template.
    """
    ...

def register_simple_overload(func, *attrs, n_args=...): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | None]:
    """
    Register an overload for func that checks for methods __attr__ for each
    attr in attrs.
    """
    ...

def try_call_method(cls_type, method, n_args=...): # -> None:
    """
    If method is defined for cls_type, return a callable that calls this method.
    If not, return None.
    """
    ...

def try_call_complex_method(cls_type, method): # -> None:
    """ __complex__ needs special treatment as the argument names are kwargs
    and therefore specific in name and default value.
    """
    ...

def take_first(*options): # -> None:
    """
    Take the first non-None option.
    """
    ...

@class_instance_overload(bool)
def class_bool(x): # -> None:
    ...

@class_instance_overload(complex)
def class_complex(real=..., imag=...): # -> None:
    ...

@class_instance_overload(operator.contains)
def class_contains(x, y): # -> None:
    ...

@class_instance_overload(float)
def class_float(x): # -> None:
    ...

@class_instance_overload(int)
def class_int(x): # -> None:
    ...

@class_instance_overload(str)
def class_str(x): # -> None:
    ...

@class_instance_overload(operator.ne)
def class_ne(x, y): # -> None:
    ...

def register_reflected_overload(func, meth_forward, meth_reflected): # -> None:
    ...

