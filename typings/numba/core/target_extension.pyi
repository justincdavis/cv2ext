"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from numba.core.registry import DelayedRegistry
from threading import local as tls

_active_context = tls()
_active_context_default = ...
class _TargetRegistry(DelayedRegistry):
    def __getitem__(self, item):
        ...
    


target_registry = ...
jit_registry = ...
class target_override:
    """Context manager to temporarily override the current target with that
       prescribed."""
    def __init__(self, name) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, ty, val, tb): # -> None:
        ...
    


def current_target(): # -> Any | str:
    """Returns the current target
    """
    ...

def get_local_target(context):
    """
    Gets the local target from the call stack if available and the TLS
    override if not.
    """
    ...

def resolve_target_str(target_str):
    """Resolves a target specified as a string to its Target class."""
    ...

def resolve_dispatcher_from_str(target_str):
    """Returns the dispatcher associated with a target string"""
    ...

class JitDecorator(ABC):
    @abstractmethod
    def __call__(self): # -> _NotImplementedType:
        ...
    


class Target(ABC):
    """ Implements a target """
    @classmethod
    def inherits_from(cls, other): # -> bool:
        """Returns True if this target inherits from 'other' False otherwise"""
        ...
    


class Generic(Target):
    """Mark the target as generic, i.e. suitable for compilation on
    any target. All must inherit from this.
    """
    ...


class CPU(Generic):
    """Mark the target as CPU.
    """
    ...


class GPU(Generic):
    """Mark the target as GPU, i.e. suitable for compilation on a GPU
    target.
    """
    ...


class CUDA(GPU):
    """Mark the target as CUDA.
    """
    ...


class NPyUfunc(Target):
    """Mark the target as a ufunc
    """
    ...


dispatcher_registry = ...
cpu_target = ...
