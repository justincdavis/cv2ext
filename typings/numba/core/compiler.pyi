"""
This type stub file was generated by pyright.
"""

from collections import namedtuple
from numba.core.targetconfig import TargetConfig

class Flags(TargetConfig):
    enable_looplift = ...
    enable_pyobject = ...
    enable_pyobject_looplift = ...
    enable_ssa = ...
    force_pyobject = ...
    release_gil = ...
    no_compile = ...
    debuginfo = ...
    boundscheck = ...
    forceinline = ...
    no_cpython_wrapper = ...
    no_cfunc_wrapper = ...
    auto_parallel = ...
    nrt = ...
    no_rewrites = ...
    error_model = ...
    fastmath = ...
    noalias = ...
    inline = ...
    target_backend = ...
    dbg_extend_lifetimes = ...
    dbg_optnone = ...
    dbg_directives_only = ...


DEFAULT_FLAGS = ...
CR_FIELDS = ...
class CompileResult(namedtuple("_CompileResult", CR_FIELDS)):
    """
    A structure holding results from the compilation of a function.
    """
    __slots__ = ...
    @property
    def codegen(self): # -> Any:
        ...
    
    def dump(self, tab=...): # -> None:
        ...
    


_LowerResult = ...
def sanitize_compile_result_entries(entries):
    ...

def compile_result(**entries): # -> CompileResult:
    ...

def run_frontend(func, inline_closures=..., emit_dels=...):
    """
    Run the compiler frontend over the given Python function, and return
    the function's canonical Numba IR.

    If inline_closures is Truthy then closure inlining will be run
    If emit_dels is Truthy the ir.Del nodes will be emitted appropriately
    """
    ...

class _CompileStatus:
    """
    Describes the state of compilation. Used like a C record.
    """
    __slots__ = ...
    def __init__(self, can_fallback) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


class _EarlyPipelineCompletion(Exception):
    """
    Raised to indicate that a pipeline has completed early
    """
    def __init__(self, result) -> None:
        ...
    


class StateDict(dict):
    """
    A dictionary that has an overloaded getattr and setattr to permit getting
    and setting key/values through the use of attributes.
    """
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    


class CompilerBase:
    """
    Stores and manages states for the compiler
    """
    def __init__(self, typingctx, targetctx, library, args, return_type, flags, locals) -> None:
        ...
    
    def compile_extra(self, func):
        ...
    
    def compile_ir(self, func_ir, lifted=..., lifted_from=...):
        ...
    
    def define_pipelines(self):
        """Child classes override this to customize the pipelines in use.
        """
        ...
    


class Compiler(CompilerBase):
    """The default compiler
    """
    def define_pipelines(self): # -> list[PassManager]:
        ...
    


class DefaultPassBuilder:
    """
    This is the default pass builder, it contains the "classic" default
    pipelines as pre-canned PassManager instances:
      - nopython
      - objectmode
      - interpreted
      - typed
      - untyped
      - nopython lowering
    """
    @staticmethod
    def define_nopython_pipeline(state, name=...): # -> PassManager:
        """Returns an nopython mode pipeline based PassManager
        """
        ...
    
    @staticmethod
    def define_nopython_lowering_pipeline(state, name=...): # -> PassManager:
        ...
    
    @staticmethod
    def define_parfor_gufunc_nopython_lowering_pipeline(state, name=...): # -> PassManager:
        ...
    
    @staticmethod
    def define_typed_pipeline(state, name=...): # -> PassManager:
        """Returns the typed part of the nopython pipeline"""
        ...
    
    @staticmethod
    def define_parfor_gufunc_pipeline(state, name=...): # -> PassManager:
        """Returns the typed part of the nopython pipeline"""
        ...
    
    @staticmethod
    def define_untyped_pipeline(state, name=...): # -> PassManager:
        """Returns an untyped part of the nopython pipeline"""
        ...
    
    @staticmethod
    def define_objectmode_pipeline(state, name=...): # -> PassManager:
        """Returns an object-mode pipeline based PassManager
        """
        ...
    


def compile_extra(typingctx, targetctx, func, args, return_type, flags, locals, library=..., pipeline_class=...):
    """Compiler entry point

    Parameter
    ---------
    typingctx :
        typing context
    targetctx :
        target context
    func : function
        the python function to be compiled
    args : tuple, list
        argument types
    return_type :
        Use ``None`` to indicate void return
    flags : numba.compiler.Flags
        compiler flags
    library : numba.codegen.CodeLibrary
        Used to store the compiled code.
        If it is ``None``, a new CodeLibrary is used.
    pipeline_class : type like numba.compiler.CompilerBase
        compiler pipeline
    """
    ...

def compile_ir(typingctx, targetctx, func_ir, args, return_type, flags, locals, lifted=..., lifted_from=..., is_lifted_loop=..., library=..., pipeline_class=...):
    """
    Compile a function with the given IR.

    For internal use only.
    """
    ...

def compile_internal(typingctx, targetctx, library, func, args, return_type, flags, locals):
    """
    For internal use only.
    """
    ...

