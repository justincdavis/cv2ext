"""
This type stub file was generated by pyright.
"""

"""
Function descriptors.
"""
def default_mangler(name, argtypes, *, abi_tags=..., uid=...): # -> str:
    ...

def qualifying_prefix(modname, qualname): # -> str:
    """
    Returns a new string that is used for the first half of the mangled name.
    """
    ...

class FunctionDescriptor:
    """
    Base class for function descriptors: an object used to carry
    useful metadata about a natively callable function.

    Note that while `FunctionIdentity` denotes a Python function
    which is being concretely compiled by Numba, `FunctionDescriptor`
    may be more "abstract".
    """
    __slots__ = ...
    def __init__(self, native, modname, qualname, unique_name, doc, typemap, restype, calltypes, args, kws, mangler=..., argtypes=..., inline=..., noalias=..., env_name=..., global_dict=..., abi_tags=..., uid=...) -> None:
        ...
    
    def lookup_globals(self): # -> dict[str, Any]:
        """
        Return the global dictionary of the function.
        It may not match the Module's globals if the function is created
        dynamically (i.e. exec)
        """
        ...
    
    def lookup_module(self): # -> ModuleType:
        """
        Return the module in which this function is supposed to exist.
        This may be a dummy module if the function was dynamically
        generated or the module can't be found.
        """
        ...
    
    def lookup_function(self): # -> Any:
        """
        Return the original function object described by this object.
        """
        ...
    
    @property
    def llvm_func_name(self): # -> str:
        """
        The LLVM-registered name for the raw function.
        """
        ...
    
    @property
    def llvm_cpython_wrapper_name(self): # -> str:
        """
        The LLVM-registered name for a CPython-compatible wrapper of the
        raw function (i.e. a PyCFunctionWithKeywords).
        """
        ...
    
    @property
    def llvm_cfunc_wrapper_name(self): # -> str:
        """
        The LLVM-registered name for a C-compatible wrapper of the
        raw function.
        """
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


class PythonFunctionDescriptor(FunctionDescriptor):
    """
    A FunctionDescriptor subclass for Numba-compiled functions.
    """
    __slots__ = ...
    @classmethod
    def from_specialized_function(cls, func_ir, typemap, restype, calltypes, mangler, inline, noalias, abi_tags): # -> Self:
        """
        Build a FunctionDescriptor for a given specialization of a Python
        function (in nopython mode).
        """
        ...
    
    @classmethod
    def from_object_mode_function(cls, func_ir): # -> Self:
        """
        Build a FunctionDescriptor for an object mode variant of a Python
        function.
        """
        ...
    


class ExternalFunctionDescriptor(FunctionDescriptor):
    """
    A FunctionDescriptor subclass for opaque external functions
    (e.g. raw C functions).
    """
    __slots__ = ...
    def __init__(self, name, restype, argtypes) -> None:
        ...
    


