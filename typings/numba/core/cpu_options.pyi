"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod

"""
Defines CPU Options for use in the CPU target
"""
class AbstractOptionValue(metaclass=ABCMeta):
    """Abstract base class for custom option values.
    """
    @abstractmethod
    def encode(self) -> str:
        """Returns an encoding of the values
        """
        ...
    
    def __repr__(self) -> str:
        ...
    


class FastMathOptions(AbstractOptionValue):
    """
    Options for controlling fast math optimization.
    """
    def __init__(self, value) -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    __nonzero__ = ...
    def encode(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class ParallelOptions(AbstractOptionValue):
    """
    Options for controlling auto parallelization.
    """
    __slots__ = ...
    def __init__(self, value) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def encode(self) -> str:
        ...
    


class InlineOptions(AbstractOptionValue):
    """
    Options for controlling inlining
    """
    def __init__(self, value) -> None:
        ...
    
    @property
    def is_never_inline(self): # -> bool:
        """
        True if never inline
        """
        ...
    
    @property
    def is_always_inline(self): # -> bool:
        """
        True if always inline
        """
        ...
    
    @property
    def has_cost_model(self): # -> bool:
        """
        True if a cost model is provided
        """
        ...
    
    @property
    def value(self): # -> str | Any:
        """
        The raw value
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def encode(self) -> str:
        ...
    


