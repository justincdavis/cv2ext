"""
This type stub file was generated by pyright.
"""

from numba.core import generators
from numba.core.lowering import BaseLower

"""
Lowering implementation for object mode.
"""
_unsupported_builtins = ...
class _Undefined:
    """
    A sentinel value for undefined variable created by Expr.undef.
    """
    def __repr__(self): # -> Literal['<undefined>']:
        ...
    


_UNDEFINED = ...
PYTHON_BINOPMAP = ...
PYTHON_COMPAREOPMAP = ...
class PyLower(BaseLower):
    GeneratorLower = generators.PyGeneratorLower
    def init(self): # -> None:
        ...
    
    def pre_lower(self): # -> None:
        ...
    
    def post_lower(self): # -> None:
        ...
    
    def pre_block(self, block): # -> None:
        ...
    
    def lower_inst(self, inst): # -> None:
        ...
    
    def lower_assign(self, inst): # -> LoadInstr | PhiInstr:
        """
        The returned object must have a new reference
        """
        ...
    
    def lower_yield(self, inst):
        ...
    
    def lower_binop(self, expr, op, inplace=...): # -> Any:
        ...
    
    def lower_expr(self, expr):
        ...
    
    def lower_const(self, const):
        ...
    
    def lower_global(self, name, value): # -> PhiInstr:
        """
        1) Check global scope dictionary.
        2) Check __builtins__.
            2a) is it a dictionary (for non __main__ module)
            2b) is it a module (for __main__ module)
        """
        ...
    
    def get_module_dict(self):
        ...
    
    def get_builtin_obj(self, name): # -> PhiInstr:
        ...
    
    def builtin_lookup(self, mod, name): # -> PhiInstr:
        """
        Args
        ----
        mod:
            The __builtins__ dictionary or module, as looked up in
            a module's globals.
        name: str
            The object to lookup
        """
        ...
    
    def check_occurred(self): # -> None:
        """
        Return if an exception occurred.
        """
        ...
    
    def check_error(self, obj):
        """
        Return if *obj* is NULL.
        """
        ...
    
    def check_int_status(self, num, ok_value=...): # -> None:
        """
        Raise an exception if *num* is smaller than *ok_value*.
        """
        ...
    
    def is_null(self, obj): # -> ICMPInstr:
        ...
    
    def return_exception_raised(self): # -> None:
        """
        Return with the currently raised exception.
        """
        ...
    
    def init_vars(self, block): # -> None:
        """
        Initialize live variables for *block*.
        """
        ...
    
    def loadvar(self, name): # -> LoadInstr:
        """
        Load the llvm value of the variable named *name*.
        """
        ...
    
    def delvar(self, name): # -> None:
        """
        Delete the variable slot with the given name. This will decref
        the corresponding Python object.
        """
        ...
    
    def storevar(self, value, name, clobber=...): # -> None:
        """
        Stores a llvm value and allocate stack slot if necessary.
        The llvm value can be of arbitrary type.
        """
        ...
    
    def cleanup_vars(self): # -> None:
        """
        Cleanup live variables.
        """
        ...
    
    def alloca(self, name, ltype=...): # -> AllocaInstr:
        """
        Allocate a stack slot and initialize it to NULL.
        The default is to allocate a pyobject pointer.
        Use ``ltype`` to override.
        """
        ...
    
    def incref(self, value): # -> None:
        ...
    
    def decref(self, value): # -> None:
        """
        This is allow to be called on non pyobject pointer, in which case
        no code is inserted.
        """
        ...
    


