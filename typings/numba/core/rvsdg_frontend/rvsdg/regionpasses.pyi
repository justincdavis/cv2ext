"""
This type stub file was generated by pyright.
"""

import abc
from collections.abc import Mapping
from typing import Generic, TypeVar
from numba_rvsdg.core.datastructures.scfg import SCFG
from numba_rvsdg.core.datastructures.basic_block import BasicBlock, RegionBlock

"""
Define ``RegionVisitor`` and ``RegionTransformer`` classes to process SCFG
"""
def toposort_graph(graph: Mapping[str, BasicBlock]) -> list[list[str]]:
    """Topologically sort the graph returning a list.

    The first element of the list is the source and the last element is the
    sink, according to the direction of the dataflow.
    Each element of the list is a list of nodes at the same topological level.
    """
    ...

Tdata = TypeVar("Tdata")
class RegionVisitor(abc.ABC, Generic[Tdata]):
    """A non-mutating pass on a SCFG.

    When each block is visited, their parent must have be visited.
    The abstract ``visit_*`` methods will receive and will return any custom
    data of type Tdata.
    """
    direction = ...
    @abc.abstractmethod
    def visit_block(self, block: BasicBlock, data: Tdata) -> Tdata:
        """This is called when a BasicBlock is visited."""
        ...
    
    @abc.abstractmethod
    def visit_loop(self, region: RegionBlock, data: Tdata) -> Tdata:
        """This is called when a loop region is visited.

        When overriding this method, remember to handle the merging path of
        ``data`` for the backedge back to the head of the loop.
        """
        ...
    
    @abc.abstractmethod
    def visit_switch(self, region: RegionBlock, data: Tdata) -> Tdata:
        """This is called when a switch region is visited.

        When overriding this method, remember to handle the merging path of
        ``data`` for all the branches in the switch when joining into the tail.
        """
        ...
    
    def visit_linear(self, region: RegionBlock, data: Tdata) -> Tdata:
        """This is called when a linear region is visited."""
        ...
    
    def visit_graph(self, scfg: SCFG, data: Tdata) -> Tdata:
        """Process a SCFG in topological order."""
        ...
    
    def visit(self, block: BasicBlock, data: Tdata) -> Tdata:
        """A generic visit method that will dispatch to the correct"""
        ...
    


class RegionTransformer(abc.ABC, Generic[Tdata]):
    """A mutating pass over a SCFG.

    This class is similar to ``RegionVisitor`` but only a "forward" direction
    is supported.
    """
    @abc.abstractmethod
    def visit_block(self, parent: SCFG, block: BasicBlock, data: Tdata) -> Tdata:
        ...
    
    @abc.abstractmethod
    def visit_loop(self, parent: SCFG, region: RegionBlock, data: Tdata) -> Tdata:
        ...
    
    @abc.abstractmethod
    def visit_switch(self, parent: SCFG, region: RegionBlock, data: Tdata) -> Tdata:
        ...
    
    def visit_linear(self, parent: SCFG, region: RegionBlock, data: Tdata) -> Tdata:
        ...
    
    def visit_graph(self, scfg: SCFG, data: Tdata) -> Tdata:
        ...
    
    def visit(self, parent: SCFG, block: BasicBlock, data: Tdata) -> Tdata:
        ...
    


