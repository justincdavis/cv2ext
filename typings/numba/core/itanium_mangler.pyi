"""
This type stub file was generated by pyright.
"""

"""
Itanium CXX ABI Mangler

Reference: https://itanium-cxx-abi.github.io/cxx-abi/abi.html

The basics of the mangling scheme.

We are hijacking the CXX mangling scheme for our use.  We map Python modules
into CXX namespace.  A `module1.submodule2.foo` is mapped to
`module1::submodule2::foo`.   For parameterized numba types, we treat them as
templated types; for example, `array(int64, 1d, C)` becomes an
`array<int64, 1, C>`.

All mangled names are prefixed with "_Z".  It is followed by the name of the
entity.  A name contains one or more identifiers.  Each identifier is encoded
as "<num of char><name>".   If the name is namespaced and, therefore,
has multiple identifiers, the entire name is encoded as "N<name>E".

For functions, arguments types follow.  There are condensed encodings for basic
built-in types; e.g. "i" for int, "f" for float.  For other types, the
previously mentioned name encoding should be used.

For templated types, the template parameters are encoded immediately after the
name.  If it is namespaced, it should be within the 'N' 'E' marker.  Template
parameters are encoded in "I<params>E", where each parameter is encoded using
the mentioned name encoding scheme.  Template parameters can contain literal
values like the '1' in the array type shown earlier.  There is special encoding
scheme for them to avoid leading digits.
"""
_re_invalid_char = ...
PREFIX = ...
N2CODE = ...
def mangle_abi_tag(abi_tag: str) -> str:
    ...

def mangle_identifier(ident, template_params=..., *, abi_tags=..., uid=...): # -> str:
    """
    Mangle the identifier with optional template parameters and abi_tags.

    Note:

    This treats '.' as '::' in C++.
    """
    ...

def mangle_type_or_value(typ): # -> str:
    """
    Mangle type parameter and arbitrary value.
    """
    ...

mangle_type = ...
mangle_value = ...
def mangle_templated_ident(identifier, parameters): # -> str:
    """
    Mangle templated identifier.
    """
    ...

def mangle_args(argtys): # -> str:
    """
    Mangle sequence of Numba type objects and arbitrary values.
    """
    ...

def mangle(ident, argtys, *, abi_tags=..., uid=...): # -> str:
    """
    Mangle identifier with Numba type objects and abi-tags.
    """
    ...

def prepend_namespace(mangled, ns):
    """
    Prepend namespace to mangled name.
    """
    ...

