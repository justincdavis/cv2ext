"""
This type stub file was generated by pyright.
"""

import threading
from numba.core import config

class TLS(threading.local):
    """Use a subclass to properly initialize the TLS variables in all threads."""
    def __init__(self) -> None:
        ...
    


tls = ...
def find_function_info(func, spec, args): # -> tuple[LiteralString | Any | None, None]:
    """Return function meta-data in a tuple.

    (name, type)"""
    ...

def chop(value): # -> str:
    ...

def create_events(fname, spec, args, kwds): # -> tuple[list[Any], list[Any]]:
    ...

def dotrace(*args, **kwds): # -> classmethod[Any, Callable[..., Any], Any] | staticmethod[Callable[..., Any], Any] | property | Callable[..., classmethod[Any, Callable[..., Any], Any] | staticmethod[Callable[..., Any], Any] | Any]:
    """Function decorator to trace a function's entry and exit.

    *args: categories in which to trace this function. Example usage:

    @trace
    def function(...):...

    @trace('mycategory')
    def function(...):...


    """
    ...

def notrace(*args, **kwds): # -> Callable[..., Any] | None:
    """Just a no-op in case tracing is disabled."""
    ...

def doevent(msg): # -> None:
    ...

def noevent(msg): # -> None:
    ...

if config.TRACE:
    logger = ...
    trace = ...
    event = ...
else:
    trace = ...
    event = ...
