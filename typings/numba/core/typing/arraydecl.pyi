"""
This type stub file was generated by pyright.
"""

import operator
from numba.core import types
from numba.core.typing.templates import AbstractTemplate, AttributeTemplate, bound_function, infer, infer_getattr, infer_global

Indexing = ...
def get_array_index_type(ary, idx):
    """
    Returns None or a tuple-3 for the types of the input array, index, and
    resulting type of ``array[index]``.

    Note: This is shared logic for ndarray getitem and setitem.
    """
    ...

@infer_global(operator.getitem)
class GetItemBuffer(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.setitem)
class SetItemBuffer(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


def normalize_shape(shape): # -> UniTuple | None:
    ...

@infer_getattr
class ArrayAttribute(AttributeTemplate):
    key = types.Array
    def resolve_dtype(self, ary): # -> DType:
        ...
    
    def resolve_nbytes(self, ary): # -> Integer:
        ...
    
    def resolve_itemsize(self, ary): # -> Integer:
        ...
    
    def resolve_shape(self, ary): # -> UniTuple:
        ...
    
    def resolve_strides(self, ary): # -> UniTuple:
        ...
    
    def resolve_ndim(self, ary): # -> Integer:
        ...
    
    def resolve_size(self, ary): # -> Integer:
        ...
    
    def resolve_flat(self, ary): # -> NumpyFlatType:
        ...
    
    def resolve_ctypes(self, ary): # -> ArrayCTypes:
        ...
    
    def resolve_flags(self, ary): # -> ArrayFlags:
        ...
    
    def resolve_T(self, ary):
        ...
    
    def resolve_real(self, ary):
        ...
    
    def resolve_imag(self, ary):
        ...
    
    @bound_function("array.transpose")
    def resolve_transpose(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.copy")
    def resolve_copy(self, ary, args, kws): # -> Signature:
        ...
    
    @bound_function("array.item")
    def resolve_item(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.itemset")
    def resolve_itemset(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.nonzero")
    def resolve_nonzero(self, ary, args, kws): # -> Signature:
        ...
    
    @bound_function("array.reshape")
    def resolve_reshape(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.sort")
    def resolve_sort(self, ary, args, kws): # -> Signature:
        ...
    
    @bound_function("array.argsort")
    def resolve_argsort(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.view")
    def resolve_view(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.astype")
    def resolve_astype(self, ary, args, kws): # -> Signature | None:
        ...
    
    @bound_function("array.ravel")
    def resolve_ravel(self, ary, args, kws): # -> Signature:
        ...
    
    @bound_function("array.flatten")
    def resolve_flatten(self, ary, args, kws): # -> Signature:
        ...
    
    def generic_resolve(self, ary, attr): # -> None:
        ...
    


@infer_getattr
class DTypeAttr(AttributeTemplate):
    key = types.DType
    def resolve_type(self, ary): # -> NumberClass:
        ...
    
    def resolve_kind(self, ary): # -> StringLiteral | None:
        ...
    


@infer
class StaticGetItemArray(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_getattr
class RecordAttribute(AttributeTemplate):
    key = types.Record
    def generic_resolve(self, record, attr):
        ...
    


@infer
class StaticGetItemRecord(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.getitem)
class StaticGetItemLiteralRecord(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer
class StaticSetItemRecord(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.setitem)
class StaticSetItemLiteralRecord(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_getattr
class ArrayCTypesAttribute(AttributeTemplate):
    key = types.ArrayCTypes
    def resolve_data(self, ctinfo): # -> Integer:
        ...
    


@infer_getattr
class ArrayFlagsAttribute(AttributeTemplate):
    key = types.ArrayFlags
    def resolve_contiguous(self, ctflags): # -> Boolean:
        ...
    
    def resolve_c_contiguous(self, ctflags): # -> Boolean:
        ...
    
    def resolve_f_contiguous(self, ctflags): # -> Boolean:
        ...
    


@infer_getattr
class NestedArrayAttribute(ArrayAttribute):
    key = types.NestedArray


def generic_homog(self, args, kws): # -> Signature:
    ...

def generic_expand(self, args, kws): # -> Signature:
    ...

def sum_expand(self, args, kws): # -> Signature:
    """
    sum can be called with or without an axis parameter, and with or without
    a dtype parameter
    """
    ...

def generic_expand_cumulative(self, args, kws): # -> Signature:
    ...

def generic_hetero_real(self, args, kws): # -> Signature:
    ...

def generic_hetero_always_real(self, args, kws): # -> Signature:
    ...

def generic_index(self, args, kws): # -> Signature:
    ...

def install_array_method(name, generic, prefer_literal=...): # -> None:
    ...

@infer_global(operator.eq)
class CmpOpEqArray(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


