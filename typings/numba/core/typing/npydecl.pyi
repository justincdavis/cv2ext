"""
This type stub file was generated by pyright.
"""

import numpy as np
import operator
from numba.core.typing.templates import AbstractTemplate, CallableTemplate
from numba import pndindex

registry = ...
infer = ...
infer_global = ...
infer_getattr = ...
class Numpy_rules_ufunc(AbstractTemplate):
    @property
    def ufunc(self):
        ...
    
    def generic(self, args, kws): # -> Signature:
        ...
    


class NumpyRulesArrayOperator(Numpy_rules_ufunc):
    _op_map = ...
    @property
    def ufunc(self): # -> Any:
        ...
    
    @classmethod
    def install_operations(cls): # -> None:
        ...
    
    def generic(self, args, kws): # -> Signature | None:
        '''Overloads and calls base class generic() method, returning
        None if a TypingError occurred.

        Returning None for operators is important since operators are
        heavily overloaded, and by suppressing type errors, we allow
        type inference to check other possibilities before giving up
        (particularly user-defined operators).
        '''
        ...
    


_binop_map = ...
class NumpyRulesInplaceArrayOperator(NumpyRulesArrayOperator):
    _op_map = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class NumpyRulesUnaryArrayOperator(NumpyRulesArrayOperator):
    _op_map = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


math_operations = ...
trigonometric_functions = ...
bit_twiddling_functions = ...
comparison_functions = ...
floating_functions = ...
logic_functions = ...
_unsupported = ...
def register_numpy_ufunc(name, register_global=...): # -> None:
    class typing_class(Numpy_rules_ufunc):
        ...
    
    

all_ufuncs = ...
supported_ufuncs = ...
all_ufuncs = ...
supported_ufuncs = ...
supported_array_operators = ...
class Numpy_method_redirection(AbstractTemplate):
    """
    A template redirecting a Numpy global function (e.g. np.sum) to an
    array method of the same name (e.g. ndarray.sum).
    """
    prefer_literal = ...
    def generic(self, args, kws): # -> None:
        ...
    


np_types = ...
def register_number_classes(register_global): # -> None:
    ...

def parse_shape(shape): # -> int | None:
    """
    Given a shape, return the number of dimensions.
    """
    ...

def parse_dtype(dtype): # -> Any | Record | UnicodeCharSeq | CharSeq | NPTimedelta | NPDatetime | NestedArray | None:
    """
    Return the dtype of a type, if it is either a DtypeSpec (used for most
    dtypes) or a TypeRef (used for record types).
    """
    ...

class BaseStackTemplate(CallableTemplate):
    def generic(self): # -> Callable[..., Array]:
        ...
    


class MatMulTyperMixin:
    def matmul_typer(self, a, b, out=...): # -> Array | Float | Complex | None:
        """
        Typer function for Numpy matrix multiplication.
        """
        ...
    


@infer_global(np.ndenumerate)
class NdEnumerate(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(np.nditer)
class NdIter(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(pndindex)
@infer_global(np.ndindex)
class NdIndex(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.eq)
class DtypeEq(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


