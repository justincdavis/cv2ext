"""
This type stub file was generated by pyright.
"""

import operator
from .. import types
from .templates import AbstractTemplate, AttributeTemplate, infer_getattr, infer_global

@infer_global(operator.contains)
class InContainer(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(len)
class ContainerLen(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.truth)
class SequenceBool(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.getitem)
class GetItemSequence(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.setitem)
class SetItemSequence(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.delitem)
class DelItemSequence(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_getattr
class NamedTupleAttribute(AttributeTemplate):
    key = types.BaseNamedTuple
    def resolve___class__(self, tup): # -> NamedTupleClass:
        ...
    
    def generic_resolve(self, tup, attr): # -> None:
        ...
    


@infer_getattr
class NamedTupleClassAttribute(AttributeTemplate):
    key = types.NamedTupleClass
    def resolve___call__(self, classty): # -> Function:
        """
        Resolve the named tuple constructor, aka the class's __call__ method.
        """
        ...
    


