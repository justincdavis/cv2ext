"""
This type stub file was generated by pyright.
"""

import operator
from numba.core.typing.templates import AbstractTemplate, infer_global
from numba.np import npdatetime_helpers
from numba.np.numpy_support import numpy_version

"""
Typing declarations for np.timedelta64.
"""
class TimedeltaUnaryOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class TimedeltaBinOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class TimedeltaCmpOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class TimedeltaOrderedCmpOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class TimedeltaMixOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        """
        (timedelta64, {int, float}) -> timedelta64
        ({int, float}, timedelta64) -> timedelta64
        """
        ...
    


class TimedeltaDivOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        """
        (timedelta64, {int, float}) -> timedelta64
        (timedelta64, timedelta64) -> float
        """
        ...
    


@infer_global(operator.pos)
class TimedeltaUnaryPos(TimedeltaUnaryOp):
    key = ...


@infer_global(operator.neg)
class TimedeltaUnaryNeg(TimedeltaUnaryOp):
    key = ...


@infer_global(operator.add)
@infer_global(operator.iadd)
class TimedeltaBinAdd(TimedeltaBinOp):
    key = ...


@infer_global(operator.sub)
@infer_global(operator.isub)
class TimedeltaBinSub(TimedeltaBinOp):
    key = ...


@infer_global(operator.mul)
@infer_global(operator.imul)
class TimedeltaBinMult(TimedeltaMixOp):
    key = ...


@infer_global(operator.truediv)
@infer_global(operator.itruediv)
class TimedeltaTrueDiv(TimedeltaDivOp):
    key = ...


@infer_global(operator.floordiv)
@infer_global(operator.ifloordiv)
class TimedeltaFloorDiv(TimedeltaDivOp):
    key = ...


if numpy_version >= (1, 25):
    @infer_global(operator.eq)
    class TimedeltaCmpEq(TimedeltaOrderedCmpOp):
        key = ...
    
    
    @infer_global(operator.ne)
    class TimedeltaCmpNe(TimedeltaOrderedCmpOp):
        key = ...
    
    
else:
    @infer_global(operator.eq)
    class TimedeltaCmpEq(TimedeltaCmpOp):
        key = ...
    
    
    @infer_global(operator.ne)
    class TimedeltaCmpNe(TimedeltaCmpOp):
        key = ...
    
    
@infer_global(operator.lt)
class TimedeltaCmpLt(TimedeltaOrderedCmpOp):
    key = ...


@infer_global(operator.le)
class TimedeltaCmpLE(TimedeltaOrderedCmpOp):
    key = ...


@infer_global(operator.gt)
class TimedeltaCmpGt(TimedeltaOrderedCmpOp):
    key = ...


@infer_global(operator.ge)
class TimedeltaCmpGE(TimedeltaOrderedCmpOp):
    key = ...


@infer_global(abs)
class TimedeltaAbs(TimedeltaUnaryOp):
    ...


@infer_global(operator.add)
@infer_global(operator.iadd)
class DatetimePlusTimedelta(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.sub)
@infer_global(operator.isub)
class DatetimeMinusTimedelta(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.sub)
class DatetimeMinusDatetime(AbstractTemplate):
    key = ...
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class DatetimeCmpOp(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_global(operator.eq)
class DatetimeCmpEq(DatetimeCmpOp):
    key = ...


@infer_global(operator.ne)
class DatetimeCmpNe(DatetimeCmpOp):
    key = ...


@infer_global(operator.lt)
class DatetimeCmpLt(DatetimeCmpOp):
    key = ...


@infer_global(operator.le)
class DatetimeCmpLE(DatetimeCmpOp):
    key = ...


@infer_global(operator.gt)
class DatetimeCmpGt(DatetimeCmpOp):
    key = ...


@infer_global(operator.ge)
class DatetimeCmpGE(DatetimeCmpOp):
    key = ...


@infer_global(npdatetime_helpers.datetime_minimum)
@infer_global(npdatetime_helpers.datetime_maximum)
class DatetimeMinMax(AbstractTemplate):
    def generic(self, args, kws): # -> Signature:
        ...
    


