"""
This type stub file was generated by pyright.
"""

from numba.core.rewrites import Rewrite, register_rewrite

@register_rewrite('before-inference')
class RewriteConstGetitems(Rewrite):
    """
    Rewrite IR expressions of the kind `getitem(value=arr, index=$constXX)`
    where `$constXX` is a known constant as
    `static_getitem(value=arr, index=<constant value>)`.
    """
    def match(self, func_ir, block, typemap, calltypes): # -> bool:
        ...
    
    def apply(self):
        """
        Rewrite all matching getitems as static_getitems.
        """
        ...
    


@register_rewrite('after-inference')
class RewriteStringLiteralGetitems(Rewrite):
    """
    Rewrite IR expressions of the kind `getitem(value=arr, index=$XX)`
    where `$XX` is a StringLiteral value as
    `static_getitem(value=arr, index=<literal value>)`.
    """
    def match(self, func_ir, block, typemap, calltypes): # -> bool:
        """
        Detect all getitem expressions and find which ones have
        string literal indexes
        """
        ...
    
    def apply(self): # -> Block:
        """
        Rewrite all matching getitems as static_getitems where the index
        is the literal value of the string.
        """
        ...
    


@register_rewrite('after-inference')
class RewriteStringLiteralSetitems(Rewrite):
    """
    Rewrite IR expressions of the kind `setitem(value=arr, index=$XX, value=)`
    where `$XX` is a StringLiteral value as
    `static_setitem(value=arr, index=<literal value>, value=)`.
    """
    def match(self, func_ir, block, typemap, calltypes): # -> bool:
        """
        Detect all setitem expressions and find which ones have
        string literal indexes
        """
        ...
    
    def apply(self): # -> Block:
        """
        Rewrite all matching setitems as static_setitems where the index
        is the literal value of the string.
        """
        ...
    


@register_rewrite('before-inference')
class RewriteConstSetitems(Rewrite):
    """
    Rewrite IR statements of the kind `setitem(target=arr, index=$constXX, ...)`
    where `$constXX` is a known constant as
    `static_setitem(target=arr, index=<constant value>, ...)`.
    """
    def match(self, func_ir, block, typemap, calltypes): # -> bool:
        ...
    
    def apply(self):
        """
        Rewrite all matching setitems as static_setitems.
        """
        ...
    


