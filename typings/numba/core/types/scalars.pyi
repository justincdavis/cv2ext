"""
This type stub file was generated by pyright.
"""

from .abstract import Dummy, Hashable, Literal, Number, Type
from functools import cached_property, total_ordering

class Boolean(Hashable):
    def cast_python_value(self, value): # -> bool:
        ...
    


def parse_integer_bitwidth(name): # -> int:
    ...

def parse_integer_signed(name):
    ...

@total_ordering
class Integer(Number):
    def __init__(self, name, bitwidth=..., signed=...) -> None:
        ...
    
    @classmethod
    def from_bitwidth(cls, bitwidth, signed=...): # -> Self:
        ...
    
    def cast_python_value(self, value): # -> Any:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    @property
    def maxval(self): # -> int:
        """
        The maximum value representable by this type.
        """
        ...
    
    @property
    def minval(self): # -> int:
        """
        The minimal value representable by this type.
        """
        ...
    


class IntegerLiteral(Literal, Integer):
    def __init__(self, value) -> None:
        ...
    
    def can_convert_to(self, typingctx, other): # -> Conversion | None:
        ...
    


class BooleanLiteral(Literal, Boolean):
    def __init__(self, value) -> None:
        ...
    
    def can_convert_to(self, typingctx, other): # -> Conversion | None:
        ...
    


@total_ordering
class Float(Number):
    def __init__(self, *args, **kws) -> None:
        ...
    
    def cast_python_value(self, value): # -> Any:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    


@total_ordering
class Complex(Number):
    def __init__(self, name, underlying_float, **kwargs) -> None:
        ...
    
    def cast_python_value(self, value): # -> Any:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    


class _NPDatetimeBase(Type):
    """
    Common base class for np.datetime64 and np.timedelta64.
    """
    def __init__(self, unit, *args, **kws) -> None:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def cast_python_value(self, value): # -> Any:
        ...
    


@total_ordering
class NPTimedelta(_NPDatetimeBase):
    type_name = ...


@total_ordering
class NPDatetime(_NPDatetimeBase):
    type_name = ...


class EnumClass(Dummy):
    """
    Type class for Enum classes.
    """
    basename = ...
    def __init__(self, cls, dtype) -> None:
        ...
    
    @property
    def key(self): # -> tuple[type, Type]:
        ...
    
    @cached_property
    def member_type(self): # -> EnumMember:
        """
        The type of this class' members.
        """
        ...
    


class IntEnumClass(EnumClass):
    """
    Type class for IntEnum classes.
    """
    basename = ...
    @cached_property
    def member_type(self): # -> IntEnumMember:
        """
        The type of this class' members.
        """
        ...
    


class EnumMember(Type):
    """
    Type class for Enum members.
    """
    basename = ...
    class_type_class = EnumClass
    def __init__(self, cls, dtype) -> None:
        ...
    
    @property
    def key(self): # -> tuple[type, Type]:
        ...
    
    @property
    def class_type(self): # -> class_type_class:
        """
        The type of this member's class.
        """
        ...
    


class IntEnumMember(EnumMember):
    """
    Type class for IntEnum members.
    """
    basename = ...
    class_type_class = IntEnumClass
    def can_convert_to(self, typingctx, other): # -> Conversion | None:
        """
        Convert IntEnum members to plain integers.
        """
        ...
    


