"""
This type stub file was generated by pyright.
"""

import abc
import weakref

"""
Implement utils for supporting retargeting of dispatchers.

WARNING: Features defined in this file are experimental. The API may change
         without notice.
"""
class RetargetCache:
    """Cache for retargeted dispatchers.

    The cache uses the original dispatcher as the key.
    """
    container_type = weakref.WeakKeyDictionary
    def __init__(self) -> None:
        ...
    
    def save_cache(self, orig_disp, new_disp): # -> None:
        """Save a dispatcher associated with the given key.
        """
        ...
    
    def load_cache(self, orig_disp): # -> None:
        """Load a dispatcher associated with the given key.
        """
        ...
    
    def items(self): # -> Iterator[tuple[Any, Any]]:
        """Returns the contents of the cache.
        """
        ...
    
    def stats(self): # -> dict[str, int]:
        """Returns stats regarding cache hit/miss.
        """
        ...
    


class BaseRetarget(abc.ABC):
    """Abstract base class for retargeting logic.
    """
    @abc.abstractmethod
    def check_compatible(self, orig_disp): # -> None:
        """Check that the retarget is compatible.

        This method does not return anything meaningful (e.g. None)
        Incompatibility is signalled via raising an exception.
        """
        ...
    
    @abc.abstractmethod
    def retarget(self, orig_disp): # -> None:
        """Retargets the given dispatcher and returns a new dispatcher-like
        callable. Or, returns the original dispatcher if the the target_backend
        will not change.
        """
        ...
    


class BasicRetarget(BaseRetarget):
    """A basic retargeting implementation for a single output target.

    This class has two abstract methods/properties that subclasses must define.

    - `output_target` must return output target name.
    - `compile_retarget` must define the logic to retarget the given dispatcher.

    By default, this class uses `RetargetCache` as the internal cache. This
    can be modified by overriding the `.cache_type` class attribute.

    """
    cache_type = RetargetCache
    def __init__(self) -> None:
        ...
    
    @abc.abstractproperty
    def output_target(self) -> str:
        """Returns the output target name.

        See numba/tests/test_retargeting.py for example usage.
        """
        ...
    
    @abc.abstractmethod
    def compile_retarget(self, orig_disp): # -> None:
        """Returns the retargeted dispatcher.

        See numba/tests/test_retargeting.py for example usage.
        """
        ...
    
    def check_compatible(self, orig_disp): # -> None:
        """
        This implementation checks that
        `self.output_target == orig_disp._required_target_backend`
        """
        ...
    
    def retarget(self, orig_disp): # -> None:
        """Apply retargeting to orig_disp.

        The retargeted dispatchers are cached for future use.
        """
        ...
    


