"""
This type stub file was generated by pyright.
"""

class _ArgManager:
    """
    A utility class to handle argument unboxing and cleanup
    """
    def __init__(self, context, builder, api, env_manager, endblk, nargs) -> None:
        ...
    
    def add_arg(self, obj, ty):
        """
        Unbox argument and emit code that handles any error during unboxing.
        Args are cleaned up in reverse order of the parameter list, and
        cleanup begins as soon as unboxing of any argument fails. E.g. failure
        on arg2 will result in control flow going through:

            arg2.err -> arg1.err -> arg0.err -> arg.end (returns)
        """
        ...
    
    def emit_cleanup(self): # -> None:
        """
        Emit the cleanup code after returning from the wrapped function.
        """
        ...
    


class _GilManager:
    """
    A utility class to handle releasing the GIL and then re-acquiring it
    again.
    """
    def __init__(self, builder, api, argman) -> None:
        ...
    
    def emit_cleanup(self): # -> None:
        ...
    


class PyCallWrapper:
    def __init__(self, context, module, func, fndesc, env, call_helper, release_gil) -> None:
        ...
    
    def build(self): # -> tuple[Function, Any]:
        ...
    
    def build_wrapper(self, api, builder, closure, args, kws): # -> None:
        ...
    
    def get_env(self, api, builder):
        """Get the Environment object which is declared as a global
        in the module of the wrapped function.
        """
        ...
    
    def debug_print(self, builder, msg): # -> None:
        ...
    


